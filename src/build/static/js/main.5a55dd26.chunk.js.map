{"version":3,"sources":["components/helpers/s3Interface.js","pages/AboutPage.js","components/helpers/formatParser.js","components/contentCheck.js","pages/AddReportPage.js","components/helpers/ClimbingPitch.js","components/AddPitchBox.js","pages/AddPitchReportPage.js","pages/EditReportPage.js","pages/EditPitchReportPage.js","components/AboutBox.js","components/NamedFieldLevel.js","components/UserMap.js","pages/HomePage.js","components/NamedField.js","components/NamedParagraph.js","pages/ReportPage.js","components/helpers/reportOperators.js","components/AnimateChildren.js","components/AnalyticsTable.js","components/LogListEntry.js","components/ReportsList.js","pages/ReportsFeedPage.js","components/ScrollToTop.js","images/mountain-logo.jpg","components/TripNavBar.js","components/TripFooter.js","components/FlyoutDetailsColumn.js","components/RouteProgressBar.js","pages/PictureReportPage.js","App.js","serviceWorker.js","index.js"],"names":["CognitoIdentityClient","require","fromCognitoIdentityPool","S3Client","GetObjectCommand","PutObjectCommand","REGION","s3","region","credentials","client","identityPoolId","BucketName","s3Img","imgSrc","size","style","src","getS3Image","imageName","a","send","Bucket","Key","then","response","reader","Body","getReader","ReadableStream","start","controller","pump","read","done","value","enqueue","close","stream","Response","blob","URL","createObjectURL","url","console","error","uploadS3Image","imgFile","file","fileName","name","photoKey","uploadParams","ACL","AboutPage","useState","setImgSrc","firstLoad","setFirstLoad","img","photoContent","alt","formatTripID","tripTitle","replace","toLowerCase","contentCheck","content","substitute","result","Array","isArray","forEach","item","index","Input","Form","Field","Control","Label","Textarea","InputFile","unique","self","indexOf","withRouter","props","user","match","params","images","setImages","title","setTitle","description","setDescription","coordinates","setCoordinates","location","setLocation","route","setRoute","pitches","setPitches","gear","setGear","elevation","setElevation","unitState","setUnitState","Date","date","setDate","totalTime","setTotalTime","totalLength","setTotalLength","discipline","setDiscipline","anchors","setAnchors","aspect","setAspect","approach","setApproach","descent","setDescent","conditions","setConditions","severity","setSeverity","ClimbingGrade","gradeInfo","setGradeInfo","captions","setCaptions","mapState","setMapState","errorAlert","setErrorAlert","handleSubmit","length","fetch","method","body","JSON","stringify","report","id","desc","loc","coord","disc","grade","_inputGrade","gradeSystem","_inputSystemName","sev","elev","upvotes","headers","history","push","uploadImages","map","image","key","Item","width","placeholder","onChange","event","caption","newCaptions","handleCaptionChange","target","coordinateLevelLeft","Side","align","weight","errorMessage","color","Header","remove","onClick","coordinateMarker","Marker","position","mapCoordinateEntry","Map","e","latlng","lat","toFixed","lng","className","center","zoom","TileLayer","attribution","maxZoom","accessToken","Column","icon","boxed","concat","files","subtitle","kind","_systems","grades","filter","placeholderGrade","system","to","ClimbingPitch","number","this","AddPitchBox","pitch","setParent","deletePitch","currentSlide","setCurrentSlide","workingPitch","isNaN","gradeContent","handleGrade","updateCurrentSlide","imageCarousel","startsWith","captionContent","heading","showThumbs","selectedItem","showStatus","showIndicators","log","tempImages","author","setAuthor","coverImage","setCoverImage","pitchArray","setPitchArray","coverImg","handlePitchChange","newPitchArray","handlePitchDelete","coverPicture","pitchContent","username","reportID","setUpvotes","useEffect","json","reportInfo","fetchData","handleUpdate","fillFields","workingArray","AboutBox","coverImgSrc","setCoverImgSrc","Content","NamedFieldLevel","UserMap","userInfo","setUserInfo","reports","pitchReports","mapRef","createRef","groupRef","corner1","Leaflet","latLng","corner2","bounds","latLngBounds","activeReport","setactiveReport","noCoords","current","leafletElement","layer","getBounds","_northEast","equals","_southWest","fitBounds","ref","minZoom","maxBounds","maxBoundsViscosity","FeatureGroup","Popup","onClose","HomePage","NamedField","NamedParagraph","alignment","ReportPage","tripID","setReportInfo","multipleImages","fullscreenState","setFullscreenState","imageHeight","setImageHeight","displayGradeSystem","setDisplayGradeSystem","showMap","setShowMap","deletePressed","setDeletePressed","infiniteLoop","dynamicHeight","centerMode","centerSlidePercentage","height","onClickItem","deleteMessage","handleDeleteReport","onMouseEnter","backgroundColor","split","word","charAt","toUpperCase","substring","join","search","handleUpvoteReport","closeOnBlur","showClose","show","format","hoverable","right","updatedReport","find","sortReports","sortBy","sortedReports","sort","sortByPitches","sortByGrade","sortByElev","sortByLength","sortByTime","sortByDate","b","dateA","dateB","getTime","pitchesA","numberCheck","Number","pitchesB","gradeA","gradeB","universalGradeA","_universalGrades","universalGradeB","elevA","elevB","lengthA","lengthB","timeA","MAX_SAFE_INTEGER","timeB","input","replacement","totalPitches","sum","totalElevation","calculateBoundingBoxes","children","boundingBoxes","React","Children","child","domNode","nodeBoundingBox","getBoundingClientRect","usePrevious","useRef","useLayoutEffect","AnimateChildren","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","scroll","setScroll","prevScroll","newBoundingBox","window","scrollY","Object","keys","firstBox","lastBox","scrollDelta","changeInY","top","requestAnimationFrame","transform","transition","AnalyticsTable","tableBody","LogListEntry","setCoverImg","coverImgPlaceholder","setCoverImgPlaceholder","ReportsList","ReportsFeedPage","view","pageState","setPageState","setSortBy","colorConversion","state","Scroll","animateScroll","scrollTo","margin","renderAs","renderContent","ScrollToTop","prevProps","Component","isActive","setIsActive","Brand","href","logo","Burger","Menu","Container","dropdown","Link","arrowless","TripFooter","visibility","Filler","percentage","filled","HoverInfo","segment","Segment","toolTip","Tooltip","placement","arrow","open","RouteProgressBar","segmentArray","filledIndex","segmentHeight","Math","round","innerHeight","reverse","workingFilledIndex","processFilledIndex","descentColor","scrollToContent","PictureReportPage","fullScreen","setFullScreen","imageColumnWidth","setImageColumnWidth","detailColumnWidth","setDetailColumnWidth","imgRefs","setImgRefs","setSegmentArray","workingImgArray","workingSegmentArray","parseInt","fill","refArray","i","workingImages","routeDetail","columnWidth","progressBar","workingFullscreenState","heightWidthRatio","naturalHeight","naturalWidth","scaledHeight","innerWidth","resize","App","exact","path","component","AddReportPage","AddPitchReportPage","EditReportPage","EditPitchReportPage","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a55dd26.chunk.js","sourcesContent":["import { useControlled } from \"@material-ui/core\";\r\nimport { Image } from 'react-bulma-components';\r\n\r\nconst { CognitoIdentityClient } = require(\"@aws-sdk/client-cognito-identity\");\r\nconst {\r\n  fromCognitoIdentityPool,\r\n} = require(\"@aws-sdk/credential-provider-cognito-identity\");\r\nconst { S3Client, GetObjectCommand, PutObjectCommand } = require(\"@aws-sdk/client-s3\");\r\n\r\n// Initialize the Amazon Cognito credentials provider\r\nconst REGION = \"us-west-2\"; //e.g., 'us-east-1'\r\nconst s3 = new S3Client({\r\nregion: REGION,   \r\ncredentials: fromCognitoIdentityPool({\r\n    client: new CognitoIdentityClient({region:  REGION }),\r\n    identityPoolId: \"us-west-2:ad443065-eddd-405b-bfa1-9a25eeae2bc0\", // IDENTITY_POOL_ID e.g., eu-west-1:xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\r\n}),\r\n});\r\n\r\n// List the photo albums that exist in the bucket\r\nvar BucketName = \"t-novak-trips\"; //BUCKET_NAME\r\n\r\nconst s3Img = (imgSrc, size=null, style=null, ref=null) => {\r\n    return typeof imgSrc === 'string' ? <Image size={size} style={style} src={imgSrc}/> : null;\r\n}\r\n\r\nconst getS3Image = async (imageName) => {\r\n    try {\r\n        return s3.send(new GetObjectCommand({Bucket: BucketName, Key: `images/${imageName}`}))\r\n        .then(response => {\r\n            const reader = response.Body.getReader();\r\n            return new ReadableStream({\r\n                start(controller) {\r\n                    return pump();\r\n                    function pump() {\r\n                        return reader.read().then(({ done, value }) => {\r\n                            if(done) {\r\n                                controller.close();\r\n                                return;\r\n                            }\r\n                            controller.enqueue(value);\r\n                            return pump();\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        .then(stream => new Response(stream))\r\n        .then(response => response.blob())\r\n        .then(blob => URL.createObjectURL(blob))\r\n        .then(url => {return url;})\r\n    } catch(err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst uploadS3Image = async (imgFile) => {\r\n    const file = imgFile[0];\r\n    const fileName = file.name;\r\n    const photoKey = `images/${fileName}`;\r\n    const uploadParams = {\r\n        Bucket: BucketName,\r\n        Key: photoKey,\r\n        Body: file,\r\n        ACL: \"public-read\",\r\n    };\r\n    try {\r\n        return s3.send(new PutObjectCommand(uploadParams));\r\n    } catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nexport { getS3Image, uploadS3Image, s3Img };","import React, { useState } from 'react';\r\nimport '../App.css'\r\nimport { getS3Image } from '../components/helpers/s3Interface.js';\r\n\r\n// Load the required clients and packages\r\n// const { CognitoIdentityClient } = require(\"@aws-sdk/client-cognito-identity\");\r\n// const {\r\n//   fromCognitoIdentityPool,\r\n// } = require(\"@aws-sdk/credential-provider-cognito-identity\");\r\n// const { S3Client, ListObjectsCommand, GetObjectCommand } = require(\"@aws-sdk/client-s3\");\r\n\r\n// const streamToBlob = require('stream-to-blob');\r\n\r\nconst AboutPage = () => {\r\n\r\n    // const [ albumFlag, setAlbumFlag ] = useState(false);\r\n    // const [ albumList, setAlbumList ] = useState([]);\r\n\r\n    const [ imgSrc, setImgSrc ] = useState(null);\r\n    const [ firstLoad, setFirstLoad] = useState(true);\r\n    \r\n    // // Initialize the Amazon Cognito credentials provider\r\n    // const REGION = \"us-west-2\"; //e.g., 'us-east-1'\r\n    // const s3 = new S3Client({\r\n    // region: REGION,   \r\n    // credentials: fromCognitoIdentityPool({\r\n    //     client: new CognitoIdentityClient({region:  REGION }),\r\n    //     identityPoolId: \"us-west-2:ad443065-eddd-405b-bfa1-9a25eeae2bc0\", // IDENTITY_POOL_ID e.g., eu-west-1:xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\r\n    // }),\r\n    // });\r\n\r\n    // List the photo albums that exist in the bucket\r\n    // var albumBucketName = \"t-novak-trips\"; //BUCKET_NAME\r\n\r\n    // const listAlbums = async () => {\r\n    //     try {\r\n    //       const data = await s3.send(\r\n    //         new ListObjectsCommand({ Delimiter: \"/\", Bucket: albumBucketName })\r\n    //       );\r\n    //       var albums = data.CommonPrefixes.map(function (commonPrefix) {\r\n    //         var prefix = commonPrefix.Prefix;\r\n    //         var albumName = decodeURIComponent(prefix.replace(\"/\", \"\"));\r\n    //         return(\r\n    //             albumName\r\n    //         );\r\n    //       });\r\n    //       setAlbumList(albums);\r\n        //   var message = albums.length\r\n        //     ? getHtml([\"<p>Click an album name to view it.</p>\"])\r\n        //     : \"<p>You don't have any albums. You need to create an album.\";\r\n        //   var htmlTemplate = [\r\n        //     \"<h2>Albums</h2>\",\r\n        //     message,\r\n        //     \"<ul>\",\r\n        //     getHtml(albums),\r\n        //     \"</ul>\",\r\n        //   ];\r\n        //   document.getElementById(\"viewer\").innerHTML = getHtml(htmlTemplate);\r\n    //     } catch (err) {\r\n    //       return alert(\"There was an error listing your albums: \" + err.message);\r\n    //     }\r\n    //   };\r\n\r\n    // const encode = (data) => {\r\n        \r\n    //     const reader = data.Body.getReader().then({\r\n        \r\n    //     return new ReadableStream({\r\n    //         start(controller) {\r\n    //           return pump();\r\n    //           function pump() {\r\n    //             return reader.read().then(({ done, value }) => {\r\n    //               // When no more data needs to be consumed, close the stream\r\n    //               if (done) {\r\n    //                   controller.close();\r\n    //                   return;\r\n    //               }\r\n    //               // Enqueue the next data chunk into our target stream\r\n    //               controller.enqueue(value);\r\n    //               return pump();\r\n    //             });\r\n    //           }\r\n    //         }\r\n    //       })\r\n    //     })\r\n    //     .then(stream => new Response(stream))\r\n    //     .then(response => response.blob())\r\n    //     .then(blob => URL.createObjectURL(blob))\r\n    //     .then(url => console.log(image.src = url))\r\n    //     .catch(err => console.error(err));\r\n    // }\r\n\r\n    // const getImgStream = async () => {\r\n    //     try {\r\n    //         s3.send(new GetObjectCommand({Bucket: 't-novak-trips', Key: 'images/mountain-picture.webp'}))\r\n    //         .then(response => {\r\n    //             const reader = response.Body.getReader();\r\n    //             return new ReadableStream({\r\n    //                 start(controller) {\r\n    //                     return pump();\r\n    //                     function pump() {\r\n    //                         return reader.read().then(({ done, value }) => {\r\n    //                             if(done) {\r\n    //                                 controller.close();\r\n    //                                 return;\r\n    //                             }\r\n    //                             controller.enqueue(value);\r\n    //                             return pump();\r\n    //                         });\r\n    //                     }\r\n    //                 }\r\n    //             })\r\n    //         })\r\n    //         .then(stream => new Response(stream))\r\n    //         .then(response => response.blob())\r\n    //         .then(blob => URL.createObjectURL(blob))\r\n    //         .then(url => setImgSrc(url))\r\n    //         .catch(err => console.error(err));\r\n\r\n    //         //setImgSrc(encode(data));\r\n    //     } catch(err) {\r\n    //         alert(\"There was an error viewing your album: \" + err.message);\r\n    //     }\r\n    // }\r\n\r\n    if(firstLoad) {\r\n        getS3Image('nose4.jpg').then(img => {setImgSrc(img)});\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    const photoContent = imgSrc ? <img alt={imgSrc} src={imgSrc}/> : null;\r\n\r\n    return(\r\n        <>\r\n        <h1>ABOUT</h1>\r\n        {photoContent}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AboutPage;","function formatTripID(tripTitle) {\r\n    return tripTitle.replace(/\\s/g, '-').toLowerCase();\r\n}\r\n\r\nfunction formatUserID(user) {\r\n    return user.replace(/\\s/g, '-').toLowerCase();\r\n}\r\n\r\nfunction undoFormatTripID(tripID) {\r\n    return tripID.split('-').map(word => word.charAt(0).toUpperCase() + word.substring(1)).join(' ');\r\n}\r\n\r\nfunction undoFormatUserID(userID) {\r\n    return userID.split('-').map(word => word.charAt(0).toUpperCase() + word.substring(1)).join(' ');\r\n}\r\n\r\nexport { formatTripID, formatUserID, undoFormatTripID, undoFormatUserID, };","function contentCheck(content, substitute = \"\\u2014\") {\r\n    let result = content;\r\n\r\n    if (Array.isArray(content)) {\r\n        content.forEach((item, index) => {\r\n            result[index] = item ? item : substitute;\r\n        }); \r\n    } else {\r\n        result = content ? content : substitute;\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nexport { contentCheck };","import React, { useState } from 'react';\r\nimport { Map, Marker, TileLayer } from 'react-leaflet';\r\nimport { formatTripID } from '../components/helpers/formatParser.js';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Dropdown,\r\n    Form,\r\n    Heading,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Level,\r\n    Message\r\n} from 'react-bulma-components';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport DatePicker from 'react-date-picker';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './css/addReportPage.css'\r\nconst { Input, Field, Control, Label, Textarea, InputFile } = Form;\r\n\r\nconst unique = (value, index, self) => {\r\n    return self.indexOf(value) === index\r\n  }\r\n\r\nconst AddReportPage = (props) => {\r\n    //Declarations\r\n    const user = props.match.params.user;\r\n    const [ images, setImages ] =           useState([]);\r\n    const [ title, setTitle ] =             useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ coordinates, setCoordinates ] = useState([]);\r\n    const [ location, setLocation ] =       useState('');\r\n    const [ route, setRoute ] =             useState('');\r\n    const [ pitches, setPitches ] =         useState('');\r\n    const [ gear, setGear ] =               useState('');\r\n    const [ elevation, setElevation ] =     useState('');\r\n    const [ unitState, setUnitState ] =     useState('m');\r\n    const [ date, setDate ] =               useState(new Date());\r\n    const [ totalTime, setTotalTime ] =     useState('');\r\n    const [ totalLength, setTotalLength ] = useState('');\r\n    const [ discipline, setDiscipline ] =   useState('Traditional');\r\n    const [ anchors, setAnchors ] =         useState('');\r\n    const [ aspect, setAspect ] =           useState('');\r\n    const [ approach, setApproach ] =       useState('');\r\n    const [ descent, setDescent ] =         useState('');\r\n    const [ conditions, setConditions ] =   useState('');\r\n    const [ severity, setSeverity ] =       useState(' ');\r\n    const [ gradeInfo, setGradeInfo ] =     useState(new ClimbingGrade('5.10a', 'yds'));\r\n    const [ captions, setCaptions] =        useState([]);\r\n\r\n    const [ mapState, setMapState ] =       useState('Manual');\r\n    const [ errorAlert, setErrorAlert ] =   useState(false);\r\n       \r\n    //Event Handlers\r\n    const handleSubmit = async () => {\r\n        if(title.length === 0) {\r\n            setErrorAlert(true);\r\n        } else {\r\n            await fetch(`/api/${user}/trip-reports/submit`, {\r\n                method: 'post',\r\n                body: JSON.stringify({\r\n                    report: {\r\n                        //descriptive\r\n                        title:      contentCheck(title),\r\n                        id:         contentCheck(formatTripID(title)),\r\n                        date:       contentCheck(date),\r\n                        desc:       description,\r\n                        totalTime:  contentCheck(totalTime),\r\n                        images:     contentCheck(images),\r\n                        captions:   contentCheck(captions, \"\"),\r\n\r\n                        //details\r\n                        route:          contentCheck(route),\r\n                        loc:            contentCheck(location),\r\n                        coord:          [contentCheck(coordinates[0]), contentCheck(coordinates[1])],\r\n                        pitches:        contentCheck(pitches),\r\n                        totalLength:    contentCheck(totalLength),\r\n                        disc:           contentCheck(discipline),\r\n                        grade:          gradeInfo._inputGrade,\r\n                        gradeSystem:    gradeInfo._inputSystemName,\r\n                        sev:            contentCheck(severity, \"\"),\r\n                        gear:           gear,\r\n                        anchors:        anchors,\r\n                        elev:           contentCheck(elevation),\r\n                        aspect:         contentCheck(aspect),\r\n                        approach:       approach,\r\n                        descent:        descent,\r\n                        conditions:     conditions,\r\n\r\n\r\n                        //upvotes & comments\r\n                        upvotes: 0\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            props.history.push('/tom-novak/trip-report-feed');\r\n        }\r\n    }\r\n\r\n    const handleCaptionChange = (caption, index) => {\r\n        let newCaptions = [...captions];\r\n        newCaptions[index] = caption;\r\n        setCaptions(newCaptions);\r\n    }\r\n    \r\n    //Conditional Renders\r\n    const uploadImages = images.length > 0 ?\r\n        <List>\r\n            {images.map((image, key) => (\r\n                <List.Item key={key}>\r\n                        <Image width='100%' src={image}/>\r\n                    <Control>\r\n                        <Textarea\r\n                            placeholder=\"Caption\"\r\n                            value={captions[key]}\r\n                            onChange={(event)=>handleCaptionChange(event.target.value, key)}\r\n                            id=\"caption-text-area\"\r\n                            />\r\n                    </Control>\r\n                </List.Item>\r\n            ))}\r\n        </List> : null;\r\n\r\n    const coordinateLevelLeft = mapState === 'Manual' ? \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input\r\n                        placeholder=\"Latitude\"\r\n                        value={coordinates[0]} \r\n                        onChange={(event)=> setCoordinates([event.target.value, coordinates[1]])}/>\r\n                </Control>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input \r\n                        placeholder=\"Longitude\" \r\n                        value={coordinates[1]} \r\n                        onChange={(event)=> setCoordinates([coordinates[0], event.target.value])}/>\r\n                </Control>\r\n            </Level.Item>\r\n        </Level.Side>\r\n        : \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Latitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[0]}</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Longitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[1]}</Heading>\r\n            </Level.Item>\r\n        </Level.Side>\r\n    ;\r\n\r\n    const errorMessage = errorAlert ? \r\n        <Message color='info'>\r\n            <Message.Header>\r\n                Submit Failure\r\n                <Button remove onClick={()=>setErrorAlert(false)}/>\r\n            </Message.Header>\r\n            <Message.Body>\r\n                Please add a title to your trip before submitting\r\n            </Message.Body>\r\n        </Message> : null;\r\n                \r\n    const coordinateMarker = coordinates[0] && coordinates[1] ? \r\n        <Marker position={coordinates}/> : null;\r\n\r\n    const mapCoordinateEntry = mapState === 'Map' ?\r\n        <Map onClick={(e)=>{setCoordinates([e.latlng.lat.toFixed(3), e.latlng.lng.toFixed(3)])}} className=\"add-report-map\" center={[51.09, -115.34]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                maxZoom={18}\r\n                id='mapbox/outdoors-v11'\r\n                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n            />\r\n            {coordinateMarker}\r\n        </Map> : null;\r\n\r\n    //Render\r\n    return (\r\n        <Box>\r\n                <Columns className=\"has-text-left\">\r\n                    <Columns.Column size=\"one-third\">\r\n                        <Field>\r\n                                <Label>Photos</Label>\r\n                                {uploadImages}\r\n                                <Level>\r\n                                    <Level.Item>\r\n                                        <Control>\r\n                                            <InputFile\r\n                                                icon={<Icon icon=\"upload\" />}\r\n                                                boxed\r\n                                                onChange={(event)=>{\r\n                                                    setImages(images.concat(['http://localhost:3000/images/'.concat(event.target.files[0].name)]));\r\n                                                    setCaptions(captions.concat(\"\"));\r\n                                                }}/>\r\n                                        </Control>\r\n                                    </Level.Item>\r\n                                </Level>\r\n                            </Field>\r\n                    </Columns.Column>\r\n                    <Columns.Column size=\"two-thirds\">\r\n                        \r\n                        <Heading subtitle size={2}><strong>Descriptive Report</strong></Heading>\r\n\r\n                        <Box>\r\n                            <Field>\r\n                                <Label>Trip Title</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"Mt Assiniboine\" value={title} onChange={(event)=> setTitle(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Level>\r\n                                <Level.Side align=\"left\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Date</Label>\r\n                                            <DatePicker onChange={(value)=>{setDate(value)}} value={date}/>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                                <Level.Side align=\"right\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Time Taken (hrs)</Label>\r\n                                            <Control>\r\n                                                <Input placeholder=\"8.5\" value={totalTime} onChange={(event)=>setTotalTime(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Field>\r\n                                <Label>Trip Description</Label>\r\n                                <Control>\r\n                                    <Textarea placeholder=\"Description\" value={description} onChange={(event)=> setDescription(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n                        </Box>\r\n\r\n                        <Heading subtitle size={2}><strong>Route Details</strong></Heading>\r\n\r\n                        <Box>\r\n\r\n                            <Columns>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Route</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"North Ridge\" value={route} onChange={(event)=> setRoute(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Location</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"Assiniboine Provincial Park\" value={location} onChange={(event)=> setLocation(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>    \r\n                            </Columns>\r\n\r\n                            <Box>\r\n                                <Field>\r\n                                    <Label>Coordinates</Label>\r\n                                    <Level>\r\n                                        {coordinateLevelLeft}\r\n                                        <Level.Side align=\"right\">\r\n                                            <Level.Item>\r\n                                                <Field kind=\"addons\">\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Map' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Map')}>\r\n                                                            Map\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Manual' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Manual')}>\r\n                                                            Manual\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                </Field>\r\n                                            </Level.Item>\r\n                                        </Level.Side>\r\n                                    </Level>\r\n                                    {mapCoordinateEntry}\r\n                                </Field>\r\n                            </Box>\r\n\r\n\r\n                            <Level>\r\n                                <Level.Side id=\"level-shrink\" align=\"left\">\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Pitches</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"N/A\" value={pitches} onChange={(event)=>setPitches(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Total Metres</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"606\" value={totalLength} onChange={(event)=>setTotalLength(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\"> \r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Discipline</Label>\r\n                                                <Dropdown onChange={(value)=>{setDiscipline(value)}} value={discipline}>\r\n                                                    <Dropdown.Item value=\"traditional\">\r\n                                                        Traditional\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"sport\">\r\n                                                        Sport\r\n                                                    </Dropdown.Item>    \r\n                                                    <Dropdown.Item value=\"mixed\">\r\n                                                        Mixed\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"ice\">\r\n                                                        Ice\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"alpine\">\r\n                                                        Alpine\r\n                                                    </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                    <Box>\r\n                                        <Field>\r\n                                            <Label>Grade</Label>\r\n                                                <Level>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo( new ClimbingGrade(value, gradeInfo._inputSystemName))}} value={gradeInfo._inputGrade}>\r\n                                                            {gradeInfo._systems[gradeInfo._inputSystemName].grades.filter(unique).map((grade) => (\r\n                                                                <Dropdown.Item key={grade} value={grade}>\r\n                                                                    {grade}\r\n                                                                </Dropdown.Item>\r\n                                                            ))}\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setSeverity(value)}} value={severity}>\r\n                                                            <Dropdown.Item value=''>\r\n                                                                N/A\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='PG-13'>\r\n                                                                PG-13\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='R'>\r\n                                                                R\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='X'>\r\n                                                                X\r\n                                                            </Dropdown.Item>\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo(new ClimbingGrade(value.placeholderGrade, value.system))}} value={gradeInfo.system}>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '5.10a', system: 'yds'}}>\r\n                                                                Yosemite Decimal System\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '6a', system: 'french'}}>\r\n                                                                French\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={{placeholderGrade: '18', system: 'australian'}}>\r\n                                                                Australian\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'hvs 5a', system: 'british'}}>\r\n                                                                British\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '19', system: 'south_african'}}>\r\n                                                                South African\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'VB', system: 'hueco'}}>\r\n                                                                Hueco\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '3+', system: 'font'}}>\r\n                                                                Fontainebleau\r\n                                                            </Dropdown.Item>  \r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Gear</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Standard Rack to 3 in.\" value={gear} onChange={(event)=> setGear(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Anchors</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Bolted, gear, trees...\" value={anchors} onChange={(event)=> setAnchors(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Level>\r\n                                    <Level.Side align=\"left\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Elevation</Label>\r\n                                                <Level>\r\n                                                    <Level.Side align=\"left\">\r\n                                                        <Level.Item>\r\n                                                            <Control>\r\n                                                                <Input placeholder={\"2000\"} value={elevation} onChange={(event)=> setElevation(event.target.value)}/>\r\n                                                            </Control>\r\n                                                        </Level.Item>\r\n                                                        <Level.Item>\r\n                                                            <Field kind=\"addons\">\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'm' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('m')}>\r\n                                                                        Metres\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'ft' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('ft')}>\r\n                                                                        Feet\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                            </Field>\r\n                                                        </Level.Item>\r\n                                                    </Level.Side>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                    <Level.Side align=\"right\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Aspect</Label>\r\n                                                <Dropdown onChange={(value)=>{setAspect(value)}} value={aspect}>\r\n                                                            <Dropdown.Item value={\"NW\"}>\r\n                                                                NW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"N\"}>\r\n                                                                N\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={\"NE\"}>\r\n                                                                NE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"E\"}>\r\n                                                                E\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SE\"}>\r\n                                                                SE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"S\"}>\r\n                                                                S\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SW\"}>\r\n                                                                SW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"W\"}>\r\n                                                                W\r\n                                                            </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                </Level>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Approach</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Parking, hike in...\" value={approach} onChange={(event)=> setApproach(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Descent</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Walk-off, rappel...\" value={descent} onChange={(event)=> setDescent(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Route Conditions</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Loose rock, early season conditions, wet...\" value={conditions} onChange={(event)=>setConditions(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        {errorMessage}\r\n                        <Level>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Button color='primary' onClick={()=>handleSubmit()}>Submit</Button>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Link to=\"/tom-novak/home\">\r\n                                            <Button color='danger'>Discard</Button>\r\n                                        </Link>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                    </Columns.Column>\r\n                </Columns>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddReportPage);","import ClimbingGrade from 'climbing-grade';\r\n\r\nclass ClimbingPitch {\r\n    constructor(number, grade=new ClimbingGrade('5.10a', 'yds'), length='', images=[], captions=[]) {\r\n        \r\n        \r\n        this.number = number === 0 ? 'Approach' : number;\r\n        this.grade = grade;\r\n        this.length = length;\r\n        this.images = images;\r\n        this.captions = captions;\r\n    }\r\n}\r\n\r\nexport default ClimbingPitch;","import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dropdown,\r\n    Form,\r\n    Heading,\r\n    Icon,\r\n    Level,\r\n} from 'react-bulma-components';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport ClimbingPitch from '../components/helpers/ClimbingPitch.js'\r\nimport { getS3Image, uploadS3Image } from '../components/helpers/s3Interface';\r\n\r\nconst { Input, Label, Textarea, InputFile } = Form;\r\n\r\nconst unique = (value, index, self) => {\r\n    return self.indexOf(value) === index\r\n  }\r\n\r\nconst AddPitchBox = ({pitch, setParent, index, gradeSystem, deletePitch}) => {\r\n\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n    const workingPitch = new ClimbingPitch(pitch.number, pitch.grade, pitch.length, pitch.images, pitch.captions);\r\n\r\n    const [images, setImages] = useState(pitch.images);\r\n \r\n    const title = isNaN(pitch.number) ? pitch.number : `Pitch ${pitch.number}` ;\r\n\r\n    const gradeContent = pitch.grade ? \r\n            <Dropdown onChange={(value)=>handleGrade(value)} value={pitch.grade._inputGrade}>\r\n                {pitch.grade._systems[gradeSystem].grades.filter(unique).map((grade) => (\r\n                    <Dropdown.Item key={grade} value={grade}>\r\n                        {grade}\r\n                    </Dropdown.Item>\r\n                ))}\r\n            </Dropdown> : null;\r\n\r\n    const handleGrade = (value) => {\r\n        workingPitch.grade=(new ClimbingGrade(value, pitch.grade._inputSystemName));\r\n        setParent(workingPitch, index);\r\n    }\r\n\r\n    const handleLength = (value) => {\r\n        if( !isNaN(value) ) {\r\n            workingPitch.length=value;\r\n            setParent(workingPitch, index);\r\n        }\r\n    }\r\n\r\n    const handleImage = (value) => {\r\n        workingPitch.images = workingPitch.images.concat([value[0].name]);\r\n        images.concat([value[0].name]);\r\n        uploadS3Image(value)\r\n        .then(response => images.map((image, index) => {\r\n            if( !image.startsWith('blob') ) {\r\n                getS3Image(image).then(img => {\r\n                    console.log('hit');\r\n                    let tempImages = [...images];\r\n                    tempImages[index] = img;\r\n                    setImages(tempImages);\r\n                });\r\n            }\r\n            return 0;\r\n        }));\r\n        workingPitch.captions = workingPitch.captions.concat('');\r\n        setParent(workingPitch, index);\r\n    }\r\n\r\n    const handleCaptionChange = (value, key) => {\r\n        let newCaptions = [...workingPitch.captions];\r\n        newCaptions[key] = value;\r\n        workingPitch.captions = newCaptions;\r\n        setParent(workingPitch, index);\r\n    }\r\n\r\n    const updateCurrentSlide = (index) => {\r\n        if (currentSlide !== index) {\r\n            setCurrentSlide(index);\r\n        }\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deletePitch(index);\r\n    }\r\n\r\n    const handleDescent = () => {\r\n        if( !isNaN(workingPitch.number) ) {\r\n            workingPitch.number = 'Descent';\r\n        } else {\r\n            workingPitch.number = index;\r\n        }\r\n        setParent(workingPitch, index);\r\n    }\r\n\r\n    // workingPitch.images.map((image, index) => {\r\n    //     if(!image.startsWith('blob')) {\r\n    //         getS3Image(image).then(img => {\r\n    //             workingPitch.images[index] = img;\r\n    //         });\r\n    //     }\r\n    // })\r\n\r\n    const imageCarousel = workingPitch.images.length > 0 ? workingPitch.images.map((image, key) => {\r\n        if( image.startsWith('blob') ) {\r\n            return(\r\n                <img\r\n                    key={key}\r\n                    alt={image}\r\n                    src={image}/>\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    }) : null;\r\n\r\n    const captionContent = workingPitch.captions.length > 0 ? workingPitch.captions.map((caption, key) => (\r\n        <div key={key}>\r\n            <Textarea\r\n                placeholder='Caption'\r\n                value={pitch.captions[key]}\r\n                onChange={(event)=>handleCaptionChange(event.target.value, key)}/>\r\n        </div>\r\n    )) : null;\r\n\r\n    return(\r\n        <Box>\r\n            <Level>\r\n                <Level.Side align='left'>\r\n                    <Level.Item>\r\n                        <Label>{title}</Label>\r\n                    </Level.Item>\r\n                </Level.Side>\r\n                <Level.Side align='right'>\r\n                    <Level.Item>\r\n                        <Heading heading>Grade:</Heading>\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        {gradeContent}\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <Heading heading>Length (m):</Heading>\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <Input\r\n                            placeholder=\"30\"\r\n                            value={pitch.length} \r\n                            onChange={(event)=> handleLength(event.target.value)}/>\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <Button onClick={handleDelete} color='light'>Remove Pitch</Button>\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <Button onClick={handleDescent} color={workingPitch.number === 'Descent' ? \"primary\" : \"light\"}>Descent</Button>\r\n                    </Level.Item>\r\n                </Level.Side>\r\n            </Level>\r\n            <Heading heading>Images</Heading>\r\n            <Carousel\r\n                showThumbs={false}\r\n                onChange={updateCurrentSlide}\r\n                selectedItem={currentSlide}>\r\n                {imageCarousel}\r\n            </Carousel>\r\n            <Carousel\r\n                showThumbs={false}\r\n                showStatus={false}\r\n                showIndicators={false}\r\n                onChange={updateCurrentSlide}\r\n                selectedItem={currentSlide}>\r\n                {captionContent}\r\n            </Carousel>\r\n\r\n            <Level>\r\n                <Level.Item>\r\n                    <InputFile\r\n                        icon={<Icon icon='upload' />}\r\n                        boxed\r\n                        onChange={(event)=>handleImage(event.target.files)} />\r\n                </Level.Item>\r\n            </Level>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AddPitchBox;","import React, { useState } from 'react';\r\nimport { Map, Marker, TileLayer } from 'react-leaflet';\r\nimport { formatTripID } from '../components/helpers/formatParser.js';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Dropdown,\r\n    Form,\r\n    Heading,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Level,\r\n    Message\r\n} from 'react-bulma-components';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport DatePicker from 'react-date-picker';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\nimport AddPitchBox from '../components/AddPitchBox.js'\r\nimport ClimbingPitch from '../components/helpers/ClimbingPitch.js';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './css/addReportPage.css'\r\nimport { getS3Image, uploadS3Image } from '../components/helpers/s3Interface.js';\r\nconst { Input, Field, Control, Label, Textarea, InputFile } = Form;\r\n\r\nconst unique = (value, index, self) => {\r\n    return self.indexOf(value) === index\r\n  }\r\n\r\nconst AddReportPage = (props) => {\r\n    //Declarations\r\n    const user = props.match.params.user;\r\n    const [ images, setImages ] =           useState([]);\r\n    const [ title, setTitle ] =             useState('');\r\n    const [ author, setAuthor ] =           useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ coverImage, setCoverImage ] = useState(null);\r\n    const [ coordinates, setCoordinates ] = useState([]);\r\n    const [ location, setLocation ] =       useState('');\r\n    const [ route, setRoute ] =             useState('');\r\n    const [ pitches, setPitches ] =         useState('');\r\n    const [ gear, setGear ] =               useState('');\r\n    const [ elevation, setElevation ] =     useState('');\r\n    const [ unitState, setUnitState ] =     useState('m');\r\n    const [ date, setDate ] =               useState(new Date());\r\n    const [ totalTime, setTotalTime ] =     useState('');\r\n    const [ totalLength, setTotalLength ] = useState('');\r\n    const [ discipline, setDiscipline ] =   useState('Traditional');\r\n    const [ anchors, setAnchors ] =         useState('');\r\n    const [ aspect, setAspect ] =           useState('');\r\n    const [ approach, setApproach ] =       useState('');\r\n    const [ descent, setDescent ] =         useState('');\r\n    const [ conditions, setConditions ] =   useState('');\r\n    const [ severity, setSeverity ] =       useState(' ');\r\n    const [ gradeInfo, setGradeInfo ] =     useState(new ClimbingGrade('5.10a', 'yds'));\r\n    const [ captions, setCaptions] =        useState([]);\r\n\r\n    const [ mapState, setMapState ] =       useState('Manual');\r\n    const [ errorAlert, setErrorAlert ] =   useState(false);\r\n       \r\n    const [pitchArray, setPitchArray ] = useState([]);\r\n\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n\r\n    //Event Handlers\r\n    const handleSubmit = async () => {\r\n        if(title.length === 0) {\r\n            setErrorAlert(true);\r\n        } else {\r\n            console.log(pitchArray);\r\n            await fetch(`/api/${user}/picture-trip-reports/submit`, {\r\n                method: 'post',\r\n                body: JSON.stringify({\r\n                    report: {\r\n                        //descriptive\r\n                        title:      contentCheck(title),\r\n                        author:     contentCheck(author),\r\n                        id:         contentCheck(formatTripID(title)),\r\n                        date:       contentCheck(date),\r\n                        desc:       description,\r\n                        coverImg:   coverImage,\r\n                        totalTime:  contentCheck(totalTime),\r\n\r\n                        //pitch-by-pitch\r\n                        pitchArray:     pitchArray,\r\n\r\n                        images:     contentCheck(images),\r\n                        captions:   contentCheck(captions, \"\"),\r\n\r\n                        //details\r\n                        route:          contentCheck(route),\r\n                        loc:            contentCheck(location),\r\n                        coord:          [contentCheck(coordinates[0]), contentCheck(coordinates[1])],\r\n                        pitches:        contentCheck(pitches),\r\n                        totalLength:    contentCheck(totalLength),\r\n                        disc:           contentCheck(discipline),\r\n                        grade:          gradeInfo._inputGrade,\r\n                        gradeSystem:    gradeInfo._inputSystemName,\r\n                        sev:            contentCheck(severity, \"\"),\r\n                        gear:           gear,\r\n                        anchors:        anchors,\r\n                        elev:           contentCheck(elevation),\r\n                        aspect:         contentCheck(aspect),\r\n                        approach:       approach,\r\n                        descent:        descent,\r\n                        conditions:     conditions,\r\n\r\n\r\n                        //upvotes & comments\r\n                        upvotes: 0\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            props.history.push('/tom-novak/trip-report-feed/list');\r\n        }\r\n    }\r\n\r\n    if( coverImage && firstLoad ){\r\n        getS3Image(coverImage).then(img => setCoverImage(img));\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    const handleCaptionChange = (caption, index) => {\r\n        let newCaptions = [...captions];\r\n        newCaptions[index] = caption;\r\n        setCaptions(newCaptions);\r\n    }\r\n\r\n    const handlePitchChange = (pitch, index) => {\r\n        let newPitchArray = [...pitchArray];\r\n        newPitchArray[index] = pitch;\r\n        setPitchArray(newPitchArray);\r\n    }\r\n    \r\n    const handlePitchDelete = (index) => {\r\n        let newPitchArray = [...pitchArray];\r\n        newPitchArray[index] = null;\r\n        setPitchArray(newPitchArray);\r\n    }\r\n    \r\n    //Conditional Renders\r\n    const uploadImages = images.length > 0 ?\r\n        <List>\r\n            {images.map((image, key) => (\r\n                <List.Item key={key}>\r\n                        <Image width='100%' src={image}/>\r\n                    <Control>\r\n                        <Textarea\r\n                            placeholder=\"Caption\"\r\n                            value={captions[key]}\r\n                            onChange={(event)=>handleCaptionChange(event.target.value, key)}\r\n                            id=\"caption-text-area\"\r\n                            />\r\n                    </Control>\r\n                </List.Item>\r\n            ))}\r\n        </List> : null;\r\n\r\n    const coverPicture = coverImage && coverImage.startsWith('blob') ? <Image width='100%' src={coverImage}/> : null;\r\n\r\n    const pitchContent = pitchArray.length > 0 ?\r\n        <List>\r\n            {pitchArray.map((pitch, key) => pitch ?\r\n            <List.Item key={key}>\r\n                <AddPitchBox pitch={pitch} index={key} setParent={handlePitchChange} deletePitch={handlePitchDelete} gradeSystem={gradeInfo._inputSystemName}/>\r\n            </List.Item> : null\r\n            )}\r\n        </List> : null;\r\n\r\n    const coordinateLevelLeft = mapState === 'Manual' ? \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input\r\n                        placeholder=\"Latitude\"\r\n                        value={coordinates[0]} \r\n                        onChange={(event)=> setCoordinates([event.target.value, coordinates[1]])}/>\r\n                </Control>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input \r\n                        placeholder=\"Longitude\" \r\n                        value={coordinates[1]} \r\n                        onChange={(event)=> setCoordinates([coordinates[0], event.target.value])}/>\r\n                </Control>\r\n            </Level.Item>\r\n        </Level.Side>\r\n        : \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Latitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[0]}</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Longitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[1]}</Heading>\r\n            </Level.Item>\r\n        </Level.Side>\r\n    ;\r\n\r\n    const errorMessage = errorAlert ? \r\n        <Message color='info'>\r\n            <Message.Header>\r\n                Submit Failure\r\n                <Button remove onClick={()=>setErrorAlert(false)}/>\r\n            </Message.Header>\r\n            <Message.Body>\r\n                Please add a title to your trip before submitting\r\n            </Message.Body>\r\n        </Message> : null;\r\n                \r\n    const coordinateMarker = coordinates[0] && coordinates[1] ? \r\n        <Marker position={coordinates}/> : null;\r\n\r\n    const mapCoordinateEntry = mapState === 'Map' ?\r\n        <Map onClick={(e)=>{setCoordinates([e.latlng.lat.toFixed(3), e.latlng.lng.toFixed(3)])}} className=\"add-report-map\" center={[51.09, -115.34]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                maxZoom={18}\r\n                id='mapbox/outdoors-v11'\r\n                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n            />\r\n            {coordinateMarker}\r\n        </Map> : null;\r\n\r\n    //Render\r\n    return (\r\n        <Box>\r\n                <Columns className=\"has-text-left\">\r\n                    <Columns.Column/>\r\n                    <Columns.Column size=\"two-thirds\">\r\n                        \r\n                        <Heading subtitle size={2}><strong>Report Summary</strong></Heading>\r\n\r\n                        <Box>\r\n                            <Field>\r\n                                <Label>Title</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"Mt Assiniboine\" value={title} onChange={(event)=> setTitle(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Field>\r\n                                <Label>Author</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"John Smith\" value={author} onChange={(event)=> setAuthor(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Level>\r\n                                <Level.Side align=\"left\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Date</Label>\r\n                                            <DatePicker onChange={(value)=>{setDate(value)}} value={date}/>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                                <Level.Side align=\"right\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Time Taken (hrs)</Label>\r\n                                            <Control>\r\n                                                <Input placeholder=\"8.5\" value={totalTime} onChange={(event)=>setTotalTime(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Field>\r\n                                <Label>Summary</Label>\r\n                                <Control>\r\n                                    <Textarea placeholder=\"Description\" value={description} onChange={(event)=> setDescription(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Label>Cover Photo</Label>\r\n                                {coverPicture}\r\n\r\n                            <Field>\r\n                                <InputFile\r\n                                    icon={<Icon icon='upload' />}\r\n                                    boxed\r\n                                    onChange={(event)=>{console.log(event.target.files[0]); setCoverImage(event.target.files[0].name); uploadS3Image(event.target.files);}} />\r\n                            </Field>\r\n\r\n                        </Box>\r\n\r\n                        <Heading subtitle size={2}><strong>Pitch-by-Pitch Details</strong></Heading>\r\n\r\n                        <Box>\r\n                            {pitchContent}\r\n                            <Button\r\n                            onClick={() => setPitchArray(pitchArray.concat(new ClimbingPitch(pitchArray.length)))}>\r\n                                Add Pitch\r\n                            </Button>\r\n                        </Box>\r\n\r\n\r\n\r\n                        <Heading subtitle size={2}><strong>Route Details</strong></Heading>\r\n\r\n                        <Box>\r\n\r\n                            <Columns>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Route</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"North Ridge\" value={route} onChange={(event)=> setRoute(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Location</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"Assiniboine Provincial Park\" value={location} onChange={(event)=> setLocation(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>    \r\n                            </Columns>\r\n\r\n                            <Box>\r\n                                <Field>\r\n                                    <Label>Coordinates</Label>\r\n                                    <Level>\r\n                                        {coordinateLevelLeft}\r\n                                        <Level.Side align=\"right\">\r\n                                            <Level.Item>\r\n                                                <Field kind=\"addons\">\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Map' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Map')}>\r\n                                                            Map\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Manual' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Manual')}>\r\n                                                            Manual\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                </Field>\r\n                                            </Level.Item>\r\n                                        </Level.Side>\r\n                                    </Level>\r\n                                    {mapCoordinateEntry}\r\n                                </Field>\r\n                            </Box>\r\n\r\n\r\n                            <Level>\r\n                                <Level.Side id=\"level-shrink\" align=\"left\">\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Pitches</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"N/A\" value={pitches} onChange={(event)=>setPitches(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Total Metres</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"606\" value={totalLength} onChange={(event)=>setTotalLength(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\"> \r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Discipline</Label>\r\n                                                <Dropdown onChange={(value)=>{setDiscipline(value)}} value={discipline}>\r\n                                                    <Dropdown.Item value=\"traditional\">\r\n                                                        Traditional\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"sport\">\r\n                                                        Sport\r\n                                                    </Dropdown.Item>    \r\n                                                    <Dropdown.Item value=\"mixed\">\r\n                                                        Mixed\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"ice\">\r\n                                                        Ice\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"alpine\">\r\n                                                        Alpine\r\n                                                    </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                    <Box>\r\n                                        <Field>\r\n                                            <Label>Grade</Label>\r\n                                                <Level>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo( new ClimbingGrade(value, gradeInfo._inputSystemName))}} value={gradeInfo._inputGrade}>\r\n                                                            {gradeInfo._systems[gradeInfo._inputSystemName].grades.filter(unique).map((grade) => (\r\n                                                                <Dropdown.Item key={grade} value={grade}>\r\n                                                                    {grade}\r\n                                                                </Dropdown.Item>\r\n                                                            ))}\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setSeverity(value)}} value={severity}>\r\n                                                            <Dropdown.Item value=''>\r\n                                                                N/A\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='PG-13'>\r\n                                                                PG-13\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='R'>\r\n                                                                R\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='X'>\r\n                                                                X\r\n                                                            </Dropdown.Item>\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo(new ClimbingGrade(value.placeholderGrade, value.system))}} value={gradeInfo.system}>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '5.10a', system: 'yds'}}>\r\n                                                                Yosemite Decimal System\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '6a', system: 'french'}}>\r\n                                                                French\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={{placeholderGrade: '18', system: 'australian'}}>\r\n                                                                Australian\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'hvs 5a', system: 'british'}}>\r\n                                                                British\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '19', system: 'south_african'}}>\r\n                                                                South African\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'VB', system: 'hueco'}}>\r\n                                                                Hueco\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '3+', system: 'font'}}>\r\n                                                                Fontainebleau\r\n                                                            </Dropdown.Item>  \r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Gear</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Standard Rack to 3 in.\" value={gear} onChange={(event)=> setGear(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Anchors</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Bolted, gear, trees...\" value={anchors} onChange={(event)=> setAnchors(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Level>\r\n                                    <Level.Side align=\"left\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Elevation</Label>\r\n                                                <Level>\r\n                                                    <Level.Side align=\"left\">\r\n                                                        <Level.Item>\r\n                                                            <Control>\r\n                                                                <Input placeholder={\"2000\"} value={elevation} onChange={(event)=> setElevation(event.target.value)}/>\r\n                                                            </Control>\r\n                                                        </Level.Item>\r\n                                                        <Level.Item>\r\n                                                            <Field kind=\"addons\">\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'm' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('m')}>\r\n                                                                        Metres\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'ft' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('ft')}>\r\n                                                                        Feet\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                            </Field>\r\n                                                        </Level.Item>\r\n                                                    </Level.Side>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                    <Level.Side align=\"right\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Aspect</Label>\r\n                                                <Dropdown onChange={(value)=>{setAspect(value)}} value={aspect}>\r\n                                                            <Dropdown.Item value={\"NW\"}>\r\n                                                                NW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"N\"}>\r\n                                                                N\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={\"NE\"}>\r\n                                                                NE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"E\"}>\r\n                                                                E\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SE\"}>\r\n                                                                SE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"S\"}>\r\n                                                                S\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SW\"}>\r\n                                                                SW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"W\"}>\r\n                                                                W\r\n                                                            </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                </Level>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Approach</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Parking, hike in...\" value={approach} onChange={(event)=> setApproach(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Descent</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Walk-off, rappel...\" value={descent} onChange={(event)=> setDescent(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Route Conditions</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Loose rock, early season conditions, wet...\" value={conditions} onChange={(event)=>setConditions(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        {errorMessage}\r\n                        <Level>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Button color='primary' onClick={()=>handleSubmit()}>Submit</Button>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Link to=\"/tom-novak/home\">\r\n                                            <Button color='danger'>Discard</Button>\r\n                                        </Link>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                    </Columns.Column>\r\n                    <Columns.Column/>\r\n                </Columns>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddReportPage);","import React, { useState, useEffect } from 'react';\r\nimport { Map, Marker, TileLayer } from 'react-leaflet';\r\nimport { formatTripID } from '../components/helpers/formatParser.js';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Dropdown,\r\n    Form,\r\n    Heading,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Level,\r\n    Message\r\n} from 'react-bulma-components';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport DatePicker from 'react-date-picker';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './css/addReportPage.css'\r\nconst { Input, Field, Control, Label, Textarea, InputFile } = Form;\r\n\r\nconst unique = (value, index, self) => {\r\n    return self.indexOf(value) === index\r\n  }\r\n\r\nconst EditReportPage = (props) => {\r\n    //Declarations\r\n    const username = props.match.params.user;\r\n    const reportID = props.match.params.reportID;\r\n\r\n    const [ images, setImages ] =           useState([]);\r\n    const [ captions, setCaptions] =        useState([]);\r\n    const [ title, setTitle ] =             useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ coordinates, setCoordinates ] = useState([]);\r\n    const [ location, setLocation ] =       useState('');\r\n    const [ route, setRoute ] =             useState('');\r\n    const [ pitches, setPitches ] =         useState('');\r\n    const [ gear, setGear ] =               useState('');\r\n    const [ elevation, setElevation ] =     useState('');\r\n    const [ unitState, setUnitState ] =     useState('m');\r\n    const [ date, setDate ] =               useState(new Date());\r\n    const [ totalTime, setTotalTime ] =     useState('');\r\n    const [ totalLength, setTotalLength ] = useState('');\r\n    const [ discipline, setDiscipline ] =   useState('Traditional');\r\n    const [ anchors, setAnchors ] =         useState('');\r\n    const [ aspect, setAspect ] =           useState('');\r\n    const [ approach, setApproach ] =       useState('');\r\n    const [ descent, setDescent ] =         useState('');\r\n    const [ conditions, setConditions ] =   useState('');\r\n    const [ severity, setSeverity ] =       useState(' ');\r\n    const [ gradeInfo, setGradeInfo ] =     useState(new ClimbingGrade('5.10a', 'yds'));\r\n    const [ upvotes, setUpvotes ] =         useState(0);\r\n\r\n    const [ mapState, setMapState ] =       useState('Manual');\r\n    const [ errorAlert, setErrorAlert ] =   useState(false);\r\n\r\n    //Conditional Renders\r\n    const uploadImages = images.length > 0 ?\r\n        <List>\r\n            {images.map((image, key) => (\r\n                <List.Item key={key}>\r\n                        <Image width='100%' key={key} src={image}/>\r\n                    <Control>\r\n                    <Textarea\r\n                        placeholder=\"Caption\"\r\n                        value={captions[key]}\r\n                        onChange={(event)=>handleCaptionChange(event.target.value, key)}\r\n                        id=\"caption-text-area\"\r\n                        />\r\n                    </Control>\r\n                </List.Item>\r\n            ))}\r\n        </List> : null;\r\n\r\n    const coordinateLevelLeft = mapState === 'Manual' ? \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input\r\n                        placeholder=\"Latitude\"\r\n                        value={coordinates[0]} \r\n                        onChange={(event)=> setCoordinates([event.target.value, coordinates[1]])}/>\r\n                </Control>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input \r\n                        placeholder=\"Longitude\" \r\n                        value={coordinates[1]} \r\n                        onChange={(event)=> setCoordinates([coordinates[0], event.target.value])}/>\r\n                </Control>\r\n            </Level.Item>\r\n        </Level.Side>\r\n        : \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Latitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[0]}</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Longitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[1]}</Heading>\r\n            </Level.Item>\r\n        </Level.Side>\r\n    ;\r\n\r\n    const errorMessage = errorAlert ? \r\n        <Message color='info'>\r\n            <Message.Header>\r\n                Update Failure\r\n                <Button remove onClick={()=>setErrorAlert(false)}/>\r\n            </Message.Header>\r\n            <Message.Body>\r\n                Please add a title to your trip before Updating\r\n            </Message.Body>\r\n        </Message> : null;\r\n                \r\n    const coordinateMarker = coordinates[0] && coordinates[1] ? \r\n        <Marker position={coordinates}/> : null;\r\n\r\n    const mapCoordinateEntry = mapState === 'Map' ?\r\n        <Map onClick={(e)=>{setCoordinates([e.latlng.lat.toFixed(3), e.latlng.lng.toFixed(3)])}} className=\"add-report-map\" center={[coordinates[0], coordinates[1]]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                maxZoom={18}\r\n                id='mapbox/outdoors-v11'\r\n                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n            />\r\n            {coordinateMarker}\r\n        </Map> : null;\r\n            \r\n    //Event Handlers\r\n    const handleCaptionChange = (caption, index) => {\r\n        let newCaptions = [...captions];\r\n        newCaptions[index] = caption;\r\n        setCaptions(newCaptions);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fillFields = (report) => {\r\n            setImages(report.images);\r\n            setCaptions(report.captions);\r\n            setTitle(report.title);\r\n            setDescription(report.desc);\r\n            setCoordinates(report.coord);\r\n            setLocation(report.loc);\r\n            setRoute(report.route);\r\n            setPitches(report.pitches);\r\n            setGear(report.gear);\r\n            setElevation(report.elev);\r\n            setDate(report.date);\r\n            setTotalTime(report.totalTime);\r\n            setTotalLength(report.totalLength);\r\n            setDiscipline(report.disc);\r\n            setAnchors(report.anchors);\r\n            setAspect(report.aspect);\r\n            setApproach(report.approach);\r\n            setDescent(report.descent);\r\n            setConditions(report.conditions);\r\n            setSeverity(report.sev);\r\n            setGradeInfo(new ClimbingGrade(report.grade, report.gradeSystem));\r\n            setUpvotes(report.upvotes);\r\n            }\r\n\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${username}/trip-reports/${reportID}`);\r\n            const reportInfo = await result.json();\r\n                    \r\n            fillFields(reportInfo);\r\n        }\r\n        fetchData();\r\n    }, [username, reportID]);\r\n\r\n    const handleUpdate = async () => {\r\n        if(title.length === 0) {\r\n            setErrorAlert(true);\r\n        } else {\r\n\r\n            await fetch(`/api/${username}/trip-reports/${reportID}/update`, {\r\n                method: 'post',\r\n                body: JSON.stringify({\r\n                    report: {\r\n                        //descriptive\r\n                        title:      contentCheck(title),\r\n                        id:         contentCheck(formatTripID(title)),\r\n                        date:       contentCheck(date),\r\n                        desc:       description,\r\n                        totalTime:  contentCheck(totalTime),\r\n                        images:     contentCheck(images),\r\n                        captions:   contentCheck(captions, \"\"),\r\n\r\n                        //details\r\n                        route:          contentCheck(route),\r\n                        loc:            contentCheck(location),\r\n                        coord:          [contentCheck(coordinates[0], \"\"), contentCheck(coordinates[1], \"\")],\r\n                        pitches:        contentCheck(pitches),\r\n                        totalLength:    contentCheck(totalLength),\r\n                        disc:           contentCheck(discipline),\r\n                        grade:          gradeInfo._inputGrade,\r\n                        gradeSystem:    gradeInfo._inputSystemName,\r\n                        sev:            contentCheck(severity, \"\"),\r\n                        gear:           gear,\r\n                        anchors:        anchors,\r\n                        elev:           contentCheck(elevation),\r\n                        aspect:         contentCheck(aspect),\r\n                        approach:       approach,\r\n                        descent:        descent,\r\n                        conditions:     conditions,\r\n\r\n\r\n                        //upvotes & comments\r\n                        upvotes: upvotes\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            props.history.push(`/tom-novak/trip-reports/${reportID}`);\r\n        }\r\n    }\r\n\r\n    //Render\r\n    return (\r\n        <Box>\r\n                <Columns className=\"has-text-left\">\r\n                    <Columns.Column size=\"one-third\">\r\n                        <Field>\r\n                                <Label>Photos</Label>\r\n                                {uploadImages}\r\n                                <Level>\r\n                                    <Level.Item>\r\n                                        <Control>\r\n                                            <InputFile\r\n                                                icon={<Icon icon=\"upload\" />}\r\n                                                boxed\r\n                                                onChange={(event)=>{\r\n                                                    setImages(images.concat(['http://localhost:3000/images/'.concat(event.target.files[0].name)]));\r\n                                                    setCaptions(captions.concat(\"\"));\r\n                                                }}/>\r\n                                        </Control>\r\n                                    </Level.Item>\r\n                                </Level>\r\n                            </Field>\r\n                    </Columns.Column>\r\n                    <Columns.Column size=\"two-thirds\">\r\n                        \r\n                        <Heading subtitle size={2}><strong>Descriptive Report</strong></Heading>\r\n\r\n                        <Box>\r\n                            <Field>\r\n                                <Label>Trip Title</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"Mt Assiniboine\" value={title} onChange={(event)=> setTitle(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Level>\r\n                                <Level.Side align=\"left\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Date</Label>\r\n                                            <DatePicker onChange={(value)=>{setDate(value)}} value={date}/>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                                <Level.Side align=\"right\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Time Taken (hrs)</Label>\r\n                                            <Control>\r\n                                                <Input placeholder=\"8.5\" value={totalTime} onChange={(event)=>setTotalTime(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Field>\r\n                                <Label>Trip Description</Label>\r\n                                <Control>\r\n                                    <Textarea placeholder=\"Description\" value={description} onChange={(event)=> setDescription(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n                        </Box>\r\n\r\n                        <Heading subtitle size={2}><strong>Route Details</strong></Heading>\r\n\r\n                        <Box>\r\n\r\n                            <Columns>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Route</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"North Ridge\" value={route} onChange={(event)=> setRoute(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Location</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"Assiniboine Provincial Park\" value={location} onChange={(event)=> setLocation(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>    \r\n                            </Columns>\r\n\r\n                            <Box>\r\n                                <Field>\r\n                                    <Label>Coordinates</Label>\r\n                                    <Level>\r\n                                        {coordinateLevelLeft}\r\n                                        <Level.Side align=\"right\">\r\n                                            <Level.Item>\r\n                                                <Field kind=\"addons\">\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Map' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Map')}>\r\n                                                            Map\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Manual' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Manual')}>\r\n                                                            Manual\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                </Field>\r\n                                            </Level.Item>\r\n                                        </Level.Side>\r\n                                    </Level>\r\n                                    {mapCoordinateEntry}\r\n                                </Field>\r\n                            </Box>\r\n\r\n\r\n                            <Level>\r\n                                <Level.Side id=\"level-shrink\" align=\"left\">\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Pitches</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"N/A\" value={pitches} onChange={(event)=>setPitches(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Total Metres</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"606\" value={totalLength} onChange={(event)=>setTotalLength(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\"> \r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Discipline</Label>\r\n                                                <Dropdown onChange={(value)=>{setDiscipline(value)}} value={discipline}>\r\n                                                    <Dropdown.Item value=\"traditional\">\r\n                                                        Traditional\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"sport\">\r\n                                                        Sport\r\n                                                    </Dropdown.Item>    \r\n                                                    <Dropdown.Item value=\"mixed\">\r\n                                                        Mixed\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"ice\">\r\n                                                        Ice\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"alpine\">\r\n                                                        Alpine\r\n                                                    </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                    <Box>\r\n                                        <Field>\r\n                                            <Label>Grade</Label>\r\n                                                <Level>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo( new ClimbingGrade(value, gradeInfo._inputSystemName))}} value={gradeInfo._inputGrade}>\r\n                                                            {gradeInfo._systems[gradeInfo._inputSystemName].grades.filter(unique).map((grade) => (\r\n                                                                <Dropdown.Item key={grade} value={grade}>\r\n                                                                    {grade}\r\n                                                                </Dropdown.Item>\r\n                                                            ))}\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setSeverity(value)}} value={severity}>\r\n                                                            <Dropdown.Item value=''>\r\n                                                                N/A\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='PG-13'>\r\n                                                                PG-13\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='R'>\r\n                                                                R\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='X'>\r\n                                                                X\r\n                                                            </Dropdown.Item>\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo(new ClimbingGrade(value.placeholderGrade, value.system))}} value={gradeInfo.system}>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '5.10a', system: 'yds'}}>\r\n                                                                Yosemite Decimal System\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '6a', system: 'french'}}>\r\n                                                                French\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={{placeholderGrade: '18', system: 'australian'}}>\r\n                                                                Australian\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'hvs 5a', system: 'british'}}>\r\n                                                                British\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '19', system: 'south_african'}}>\r\n                                                                South African\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'VB', system: 'hueco'}}>\r\n                                                                Hueco\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '3+', system: 'font'}}>\r\n                                                                Fontainebleau\r\n                                                            </Dropdown.Item>  \r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Gear</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Standard Rack to 3 in.\" value={gear} onChange={(event)=> setGear(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Anchors</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Bolted, gear, trees...\" value={anchors} onChange={(event)=> setAnchors(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Level>\r\n                                    <Level.Side align=\"left\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Elevation</Label>\r\n                                                <Level>\r\n                                                    <Level.Side align=\"left\">\r\n                                                        <Level.Item>\r\n                                                            <Control>\r\n                                                                <Input placeholder={\"2000\"} value={elevation} onChange={(event)=> setElevation(event.target.value)}/>\r\n                                                            </Control>\r\n                                                        </Level.Item>\r\n                                                        <Level.Item>\r\n                                                            <Field kind=\"addons\">\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'm' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('m')}>\r\n                                                                        Metres\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'ft' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('ft')}>\r\n                                                                        Feet\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                            </Field>\r\n                                                        </Level.Item>\r\n                                                    </Level.Side>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                    <Level.Side align=\"right\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Aspect</Label>\r\n                                                <Dropdown onChange={(value)=>{setAspect(value)}} value={aspect}>\r\n                                                            <Dropdown.Item value={\"NW\"}>\r\n                                                                NW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"N\"}>\r\n                                                                N\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={\"NE\"}>\r\n                                                                NE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"E\"}>\r\n                                                                E\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SE\"}>\r\n                                                                SE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"S\"}>\r\n                                                                S\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SW\"}>\r\n                                                                SW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"W\"}>\r\n                                                                W\r\n                                                            </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                </Level>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Approach</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Parking, hike in...\" value={approach} onChange={(event)=> setApproach(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Descent</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Walk-off, rappel...\" value={descent} onChange={(event)=> setDescent(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Route Conditions</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Loose rock, early season conditions, wet...\" value={conditions} onChange={(event)=>setConditions(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        {errorMessage}\r\n                        <Level>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Button color='primary' onClick={()=>handleUpdate()}>Update</Button>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Link to=\"/tom-novak/home\">\r\n                                            <Button color='danger'>Discard</Button>\r\n                                        </Link>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                    </Columns.Column>\r\n                </Columns>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default withRouter(EditReportPage);","import React, { useState, useEffect } from 'react';\r\nimport { Map, Marker, TileLayer } from 'react-leaflet';\r\nimport { formatTripID } from '../components/helpers/formatParser.js';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Dropdown,\r\n    Form,\r\n    Heading,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Level,\r\n    Message\r\n} from 'react-bulma-components';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport DatePicker from 'react-date-picker';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\nimport AddPitchBox from '../components/AddPitchBox.js'\r\nimport ClimbingPitch from '../components/helpers/ClimbingPitch.js';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './css/addReportPage.css'\r\nimport { getS3Image, uploadS3Image } from '../components/helpers/s3Interface.js';\r\nconst { Input, Field, Control, Label, Textarea, InputFile } = Form;\r\n\r\nconst unique = (value, index, self) => {\r\n    return self.indexOf(value) === index\r\n  }\r\n\r\nconst EditPitchReportPage = (props) => {\r\n    //Declarations\r\n    const user      = props.match.params.user;\r\n    const reportID  = props.match.params.reportID;\r\n    const [ title, setTitle ] =             useState('');\r\n    const [ author, setAuthor ] =           useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ coverImage, setCoverImage ] = useState(null);\r\n    const [ coordinates, setCoordinates ] = useState([]);\r\n    const [ location, setLocation ] =       useState('');\r\n    const [ route, setRoute ] =             useState('');\r\n    const [ pitches, setPitches ] =         useState('');\r\n    const [ gear, setGear ] =               useState('');\r\n    const [ elevation, setElevation ] =     useState('');\r\n    const [ unitState, setUnitState ] =     useState('m');\r\n    const [ date, setDate ] =               useState(new Date());\r\n    const [ totalTime, setTotalTime ] =     useState('');\r\n    const [ totalLength, setTotalLength ] = useState('');\r\n    const [ discipline, setDiscipline ] =   useState('Traditional');\r\n    const [ anchors, setAnchors ] =         useState('');\r\n    const [ aspect, setAspect ] =           useState('');\r\n    const [ approach, setApproach ] =       useState('');\r\n    const [ descent, setDescent ] =         useState('');\r\n    const [ conditions, setConditions ] =   useState('');\r\n    const [ severity, setSeverity ] =       useState(' ');\r\n    const [ gradeInfo, setGradeInfo ] =     useState(new ClimbingGrade('5.10a', 'yds'));\r\n\r\n    const [ mapState, setMapState ] =       useState('Manual');\r\n    const [ errorAlert, setErrorAlert ] =   useState(false);\r\n\r\n    const [ upvotes, setUpvotes ] =         useState(0);\r\n       \r\n    const [pitchArray, setPitchArray ] = useState([]);\r\n\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n\r\n    //Event Handlers\r\n    useEffect(() => {\r\n        const fillFields = (report) => {\r\n            setTitle(report.title);\r\n            setAuthor(report.author);\r\n            setDescription(report.desc);\r\n            setCoverImage(report.coverImg);\r\n            setCoordinates(report.coord);\r\n            setLocation(report.loc);\r\n            setRoute(report.route);\r\n            setPitches(report.pitches);\r\n            setGear(report.gear);\r\n            setElevation(report.elev);\r\n            setDate(report.date);\r\n            setTotalTime(report.totalTime);\r\n            setDiscipline(report.disc);\r\n            setAnchors(report.anchors);\r\n            setAspect(report.aspect);\r\n            setApproach(report.approach);\r\n            setDescent(report.descent);\r\n            setConditions(report.conditions);\r\n            setSeverity(report.sev);\r\n            setGradeInfo(new ClimbingGrade(report.grade, report.gradeSystem));\r\n            setUpvotes(report.upvotes);\r\n\r\n            //handle copy of pitch array\r\n            let workingArray = [];\r\n            report.pitchArray.map((pitch, index)=> {\r\n                workingArray[index] = pitch ? new ClimbingPitch(pitch.number, new ClimbingGrade(pitch.grade._inputGrade, report.gradeSystem), pitch.length, pitch.images, pitch.captions) : null;\r\n                return 0;\r\n            })\r\n            setPitchArray(workingArray);\r\n        }\r\n\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${user}/picture-trip-reports/${reportID}`);\r\n            const reportInfo = await result.json();\r\n\r\n            fillFields(reportInfo);\r\n        }\r\n        fetchData();\r\n    }, [user, reportID]);\r\n\r\n    const handlePitchChange = (pitch, index) => {\r\n        let newPitchArray = [...pitchArray];\r\n        newPitchArray[index] = pitch;\r\n        setPitchArray(newPitchArray);\r\n    }\r\n    \r\n    const handlePitchDelete = (index) => {\r\n        let newPitchArray = [...pitchArray];\r\n        newPitchArray[index] = null;\r\n        setPitchArray(newPitchArray);\r\n    }\r\n    \r\n    const handleUpdate = async () => {\r\n        if(title.length === 0) {\r\n            setErrorAlert(true);\r\n        } else {\r\n\r\n            await fetch(`/api/${user}/picture-trip-reports/${reportID}/update`, {\r\n                method: 'post',\r\n                body: JSON.stringify({\r\n                    report: {\r\n                        //descriptive\r\n                        title:      contentCheck(title),\r\n                        author:     contentCheck(author),\r\n                        id:         contentCheck(formatTripID(title)),\r\n                        date:       contentCheck(date),\r\n                        desc:       description,\r\n                        coverImg:   coverImage,\r\n                        totalTime:  contentCheck(totalTime),\r\n\r\n                        //pitch-by-pitch\r\n                        pitchArray:     pitchArray,\r\n\r\n                        //details\r\n                        route:          contentCheck(route),\r\n                        loc:            contentCheck(location),\r\n                        coord:          [contentCheck(coordinates[0]), contentCheck(coordinates[1])],\r\n                        pitches:        contentCheck(pitches),\r\n                        totalLength:    contentCheck(totalLength),\r\n                        disc:           contentCheck(discipline),\r\n                        grade:          gradeInfo._inputGrade,\r\n                        gradeSystem:    gradeInfo._inputSystemName,\r\n                        sev:            contentCheck(severity, \"\"),\r\n                        gear:           gear,\r\n                        anchors:        anchors,\r\n                        elev:           contentCheck(elevation),\r\n                        aspect:         contentCheck(aspect),\r\n                        approach:       approach,\r\n                        descent:        descent,\r\n                        conditions:     conditions,\r\n\r\n\r\n                        //upvotes & comments\r\n                        upvotes: upvotes\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            props.history.push(`/tom-novak/photo-report/${reportID}`);\r\n        }\r\n    }\r\n\r\n    if( coverImage && firstLoad ){\r\n        getS3Image(coverImage).then(img => setCoverImage(img));\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    //Conditional Renders\r\n    const coverPicture = coverImage && coverImage.startsWith('blob') ? <Image width='100%' src={coverImage}/> : null;\r\n\r\n    const pitchContent = pitchArray.length > 0 ?\r\n        <List>\r\n            {pitchArray.map((pitch, key) => pitch ?\r\n            <List.Item key={key}>\r\n                <AddPitchBox pitch={pitch} index={key} setParent={handlePitchChange} deletePitch={handlePitchDelete} gradeSystem={gradeInfo._inputSystemName}/>\r\n            </List.Item> : null\r\n            )}\r\n        </List> : null;\r\n\r\n    const coordinateLevelLeft = mapState === 'Manual' ? \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input\r\n                        placeholder=\"Latitude\"\r\n                        value={coordinates[0]} \r\n                        onChange={(event)=> setCoordinates([event.target.value, coordinates[1]])}/>\r\n                </Control>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Control>\r\n                    <Input \r\n                        placeholder=\"Longitude\" \r\n                        value={coordinates[1]} \r\n                        onChange={(event)=> setCoordinates([coordinates[0], event.target.value])}/>\r\n                </Control>\r\n            </Level.Item>\r\n        </Level.Side>\r\n        : \r\n        <Level.Side align=\"left\">\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Latitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[0]}</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading weight=\"normal\" size={5}>Longitude:</Heading>\r\n            </Level.Item>\r\n            <Level.Item>\r\n                <Heading size={5}>{coordinates[1]}</Heading>\r\n            </Level.Item>\r\n        </Level.Side>\r\n    ;\r\n\r\n    const errorMessage = errorAlert ? \r\n        <Message color='info'>\r\n            <Message.Header>\r\n                Submit Failure\r\n                <Button remove onClick={()=>setErrorAlert(false)}/>\r\n            </Message.Header>\r\n            <Message.Body>\r\n                Please add a title to your trip before submitting\r\n            </Message.Body>\r\n        </Message> : null;\r\n                \r\n    const coordinateMarker = coordinates[0] && coordinates[1] ? \r\n        <Marker position={coordinates}/> : null;\r\n\r\n    const mapCoordinateEntry = mapState === 'Map' ?\r\n        <Map onClick={(e)=>{setCoordinates([e.latlng.lat.toFixed(3), e.latlng.lng.toFixed(3)])}} className=\"add-report-map\" center={[51.09, -115.34]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                maxZoom={18}\r\n                id='mapbox/outdoors-v11'\r\n                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n            />\r\n            {coordinateMarker}\r\n        </Map> : null;\r\n\r\n    //Render\r\n    return (\r\n        <Box>\r\n                <Columns className=\"has-text-left\">\r\n                    <Columns.Column/>\r\n                    <Columns.Column size=\"two-thirds\">\r\n                        \r\n                        <Heading subtitle size={2}><strong>Report Summary</strong></Heading>\r\n\r\n                        <Box>\r\n                            <Field>\r\n                                <Label>Title</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"Mt Assiniboine\" value={title} onChange={(event)=> setTitle(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Field>\r\n                                <Label>Author</Label>\r\n                                <Control>\r\n                                    <Input placeholder=\"John Smith\" value={author} onChange={(event)=> setAuthor(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Level>\r\n                                <Level.Side align=\"left\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Date</Label>\r\n                                            <DatePicker onChange={(value)=>{setDate(value)}} value={date}/>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                                <Level.Side align=\"right\">\r\n                                    <Level.Item>\r\n                                        <Field>\r\n                                            <Label>Time Taken (hrs)</Label>\r\n                                            <Control>\r\n                                                <Input placeholder=\"8.5\" value={totalTime} onChange={(event)=>setTotalTime(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Field>\r\n                                <Label>Summary</Label>\r\n                                <Control>\r\n                                    <Textarea placeholder=\"Description\" value={description} onChange={(event)=> setDescription(event.target.value)}/>\r\n                                </Control>\r\n                            </Field>\r\n\r\n                            <Label>Cover Photo</Label>\r\n                                {coverPicture}\r\n\r\n                            <Field>\r\n                                <InputFile\r\n                                    icon={<Icon icon='upload' />}\r\n                                    boxed\r\n                                    onChange={(event)=>{setCoverImage(event.target.files[0].name); uploadS3Image(event.target.files);}} />\r\n                            </Field>\r\n\r\n                        </Box>\r\n\r\n                        <Heading subtitle size={2}><strong>Pitch-by-Pitch Details</strong></Heading>\r\n\r\n                        <Box>\r\n                            {pitchContent}\r\n                            <Button\r\n                            onClick={() => setPitchArray(pitchArray.concat(new ClimbingPitch(pitchArray.length)))}>\r\n                                Add Pitch\r\n                            </Button>\r\n                        </Box>\r\n\r\n\r\n\r\n                        <Heading subtitle size={2}><strong>Route Details</strong></Heading>\r\n\r\n                        <Box>\r\n\r\n                            <Columns>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Route</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"North Ridge\" value={route} onChange={(event)=> setRoute(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>\r\n                                <Columns.Column size=\"half\">\r\n                                    <Field>\r\n                                        <Label>Location</Label>\r\n                                        <Control>\r\n                                            <Input placeholder=\"Assiniboine Provincial Park\" value={location} onChange={(event)=> setLocation(event.target.value)}/>\r\n                                        </Control>\r\n                                    </Field>\r\n                                </Columns.Column>    \r\n                            </Columns>\r\n\r\n                            <Box>\r\n                                <Field>\r\n                                    <Label>Coordinates</Label>\r\n                                    <Level>\r\n                                        {coordinateLevelLeft}\r\n                                        <Level.Side align=\"right\">\r\n                                            <Level.Item>\r\n                                                <Field kind=\"addons\">\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Map' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Map')}>\r\n                                                            Map\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                    <Control>\r\n                                                        <Button\r\n                                                            color={mapState === 'Manual' ? \"primary\" : \"\"}\r\n                                                            onClick={() => setMapState('Manual')}>\r\n                                                            Manual\r\n                                                        </Button>\r\n                                                    </Control>\r\n                                                </Field>\r\n                                            </Level.Item>\r\n                                        </Level.Side>\r\n                                    </Level>\r\n                                    {mapCoordinateEntry}\r\n                                </Field>\r\n                            </Box>\r\n\r\n\r\n                            <Level>\r\n                                <Level.Side id=\"level-shrink\" align=\"left\">\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Pitches</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"N/A\" value={pitches} onChange={(event)=>setPitches(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Total Metres</Label>\r\n                                                <Control>\r\n                                                    <Input placeholder=\"606\" value={totalLength} onChange={(event)=>setTotalLength(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\"> \r\n                                        <Box>\r\n                                            <Field>\r\n                                                <Label>Discipline</Label>\r\n                                                <Dropdown onChange={(value)=>{setDiscipline(value)}} value={discipline}>\r\n                                                    <Dropdown.Item value=\"traditional\">\r\n                                                        Traditional\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"sport\">\r\n                                                        Sport\r\n                                                    </Dropdown.Item>    \r\n                                                    <Dropdown.Item value=\"mixed\">\r\n                                                        Mixed\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"ice\">\r\n                                                        Ice\r\n                                                    </Dropdown.Item>\r\n                                                    <Dropdown.Item value=\"alpine\">\r\n                                                        Alpine\r\n                                                    </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                    <Level.Item id=\"level-shrink\">\r\n                                    <Box>\r\n                                        <Field>\r\n                                            <Label>Grade</Label>\r\n                                                <Level>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo( new ClimbingGrade(value, gradeInfo._inputSystemName))}} value={gradeInfo._inputGrade}>\r\n                                                            {gradeInfo._systems[gradeInfo._inputSystemName].grades.filter(unique).map((grade) => (\r\n                                                                <Dropdown.Item key={grade} value={grade}>\r\n                                                                    {grade}\r\n                                                                </Dropdown.Item>\r\n                                                            ))}\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setSeverity(value)}} value={severity}>\r\n                                                            <Dropdown.Item value=''>\r\n                                                                N/A\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='PG-13'>\r\n                                                                PG-13\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='R'>\r\n                                                                R\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value='X'>\r\n                                                                X\r\n                                                            </Dropdown.Item>\r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                    <Level.Item>\r\n                                                        <Dropdown onChange={(value)=>{setGradeInfo(new ClimbingGrade(value.placeholderGrade, value.system))}} value={gradeInfo.system}>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '5.10a', system: 'yds'}}>\r\n                                                                Yosemite Decimal System\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '6a', system: 'french'}}>\r\n                                                                French\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={{placeholderGrade: '18', system: 'australian'}}>\r\n                                                                Australian\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'hvs 5a', system: 'british'}}>\r\n                                                                British\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '19', system: 'south_african'}}>\r\n                                                                South African\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: 'VB', system: 'hueco'}}>\r\n                                                                Hueco\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={{placeholderGrade: '3+', system: 'font'}}>\r\n                                                                Fontainebleau\r\n                                                            </Dropdown.Item>  \r\n                                                        </Dropdown>\r\n                                                    </Level.Item>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Box>\r\n                                    </Level.Item>\r\n                                </Level.Side>\r\n                            </Level>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Gear</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Standard Rack to 3 in.\" value={gear} onChange={(event)=> setGear(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"half\">\r\n                                            <Field>\r\n                                                <Label>Anchors</Label>\r\n                                                <Control>\r\n                                                    <Textarea placeholder=\"Bolted, gear, trees...\" value={anchors} onChange={(event)=> setAnchors(event.target.value)}/>\r\n                                                </Control>\r\n                                            </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Level>\r\n                                    <Level.Side align=\"left\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Elevation</Label>\r\n                                                <Level>\r\n                                                    <Level.Side align=\"left\">\r\n                                                        <Level.Item>\r\n                                                            <Control>\r\n                                                                <Input placeholder={\"2000\"} value={elevation} onChange={(event)=> setElevation(event.target.value)}/>\r\n                                                            </Control>\r\n                                                        </Level.Item>\r\n                                                        <Level.Item>\r\n                                                            <Field kind=\"addons\">\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'm' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('m')}>\r\n                                                                        Metres\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                                <Control>\r\n                                                                    <Button\r\n                                                                        color={unitState === 'ft' ? \"primary\" : \"\"}\r\n                                                                        onClick={() => setUnitState('ft')}>\r\n                                                                        Feet\r\n                                                                    </Button>\r\n                                                                </Control>\r\n                                                            </Field>\r\n                                                        </Level.Item>\r\n                                                    </Level.Side>\r\n                                                </Level>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                    <Level.Side align=\"right\">\r\n                                        <Level.Item>\r\n                                            <Field>\r\n                                                <Label>Aspect</Label>\r\n                                                <Dropdown onChange={(value)=>{setAspect(value)}} value={aspect}>\r\n                                                            <Dropdown.Item value={\"NW\"}>\r\n                                                                NW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"N\"}>\r\n                                                                N\r\n                                                            </Dropdown.Item>    \r\n                                                            <Dropdown.Item value={\"NE\"}>\r\n                                                                NE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"E\"}>\r\n                                                                E\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SE\"}>\r\n                                                                SE\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"S\"}>\r\n                                                                S\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"SW\"}>\r\n                                                                SW\r\n                                                            </Dropdown.Item>\r\n                                                            <Dropdown.Item value={\"W\"}>\r\n                                                                W\r\n                                                            </Dropdown.Item>\r\n                                                </Dropdown>\r\n                                            </Field>\r\n                                        </Level.Item>\r\n                                    </Level.Side>\r\n                                </Level>\r\n                            </Box>\r\n\r\n                            <Box>\r\n                                <Columns>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Approach</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Parking, hike in...\" value={approach} onChange={(event)=> setApproach(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Descent</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Walk-off, rappel...\" value={descent} onChange={(event)=> setDescent(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                    <Columns.Column size=\"one-third\">\r\n                                        <Field>\r\n                                            <Label>Route Conditions</Label>\r\n                                            <Control>\r\n                                                <Textarea placeholder=\"Loose rock, early season conditions, wet...\" value={conditions} onChange={(event)=>setConditions(event.target.value)}/>\r\n                                            </Control>\r\n                                        </Field>\r\n                                    </Columns.Column>\r\n                                </Columns>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        {errorMessage}\r\n                        <Level>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Button color='primary' onClick={()=>handleUpdate()}>Update</Button>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                                <Level.Item>\r\n                                    <Field>\r\n                                        <Link to=\"/tom-novak/home\">\r\n                                            <Button color='danger'>Discard</Button>\r\n                                        </Link>\r\n                                    </Field>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                    </Columns.Column>\r\n                    <Columns.Column/>\r\n                </Columns>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default withRouter(EditPitchReportPage);","import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Card, \r\n    Content,\r\n    Media\r\n} from 'react-bulma-components';\r\nimport { getS3Image, s3Img } from '../components/helpers/s3Interface.js';\r\nimport './css/profileBox.css';\r\n\r\nconst AboutBox = ({ user }) => {\r\n    //Declarations\r\n    //const [userInfo, setUserInfo] = useState(null);\r\n    const [coverImgSrc, setCoverImgSrc] = useState(null);\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n    //const [profileImgSrc, setProfileImgSrc] = useState(null);\r\n\r\n    // //Event Handlers\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         const result = await fetch(`/${user}/trip-reports`);\r\n    //         const body = await result.json();\r\n    //         setUserInfo(body);\r\n    //         }\r\n    //         fetchData();\r\n    //         getS3Image('mount-assiniboine.jpg').then(img => setCoverImgSrc(img));\r\n    //         //getS3Image('Tom_Novak.JPG').then(img => setProfileImgSrc(img));\r\n    // }, [user]);\r\n\r\n    if(firstLoad) {\r\n        getS3Image('mount-assiniboine.jpg').then(img => setCoverImgSrc(img));\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    //Render\r\n    return (\r\n        <>\r\n        <Box>\r\n            <Card>\r\n                {s3Img(coverImgSrc)}\r\n                <Card.Content>\r\n                    <Media>\r\n                        {/* <Media.Item renderAs=\"figure\" position=\"left\">\r\n                            <Box style={{padding: '8px 8px 2px 8px'}}>\r\n                                {s3Img(profileImgSrc, 96, {margin: '0px 0px 0px 0px'})}\r\n                            </Box>\r\n                        </Media.Item> */}\r\n                        <Media.Item>\r\n                            <Content>\r\n                            <strong>About</strong>\r\n                            <br />\r\n                            <p className='is-size-6'>Hi! Thanks for checking out my project! This is a web application I made using the ReactJS framework, to display rock climbing trip reports. It's still a work in progress, but as of right now anyone can add, view and edit trip reports. Some features I found exciting were the dynamic resizing of images on click when viewing a report, the progress bar that adjusts as you move along the route, and the way that different logs reorganize themselves on the feed pages when different filters are used. Feel free to click around and send along any feedback you have!</p>\r\n                            <br/>\r\n                            <small>novakthomasa@gmail.com</small>\r\n                            </Content>\r\n                        </Media.Item>\r\n                    </Media>\r\n                </Card.Content>\r\n            </Card>\r\n        </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport { Heading, Level } from 'react-bulma-components';\r\n\r\nconst NamedFieldLevel = (props) => {\r\n    //Render\r\n    return(\r\n        <Level id={props.id}>\r\n            <Level.Side align=\"left\">\r\n                <Level.Item>\r\n                    <Heading heading className=\"has-text-weight-bold\">{props.name}</Heading>\r\n                </Level.Item>\r\n            </Level.Side>\r\n            <Level.Side align=\"right\">\r\n                <Level.Item>\r\n                    <Heading heading>{props.content}</Heading>\r\n                </Level.Item>\r\n            </Level.Side>\r\n        </Level>\r\n    )\r\n}\r\n\r\nexport default NamedFieldLevel;","import React, { createRef, useState, useEffect } from 'react';\r\nimport { Heading } from 'react-bulma-components';\r\nimport {\r\n    FeatureGroup,\r\n    Map,\r\n    Marker,\r\n    Popup,\r\n    TileLayer\r\n} from 'react-leaflet';\r\nimport Leaflet from 'leaflet';\r\nimport { Link } from 'react-router-dom';\r\nimport NamedFieldLevel from '../components/NamedFieldLevel.js';\r\n\r\nconst UserMap = ({ user }) => {\r\n    //Declarations\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    const reports = userInfo ? userInfo.pitchReports : [];\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n    const mapRef = createRef();\r\n    const groupRef = createRef();\r\n\r\n    const corner1 = Leaflet.latLng(-90, -200)\r\n    const corner2 = Leaflet.latLng(90, 200)\r\n    const bounds = Leaflet.latLngBounds(corner1, corner2)\r\n\r\n    const [activeReport, setactiveReport] = useState(null);\r\n\r\n    //Event Handlers\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${user}/picture-trip-reports`);\r\n            const body = await result.json();\r\n            setUserInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [user]);\r\n\r\n    useEffect(() => {    \r\n        const noCoords = {\r\n            _northEast: {\r\n                lat: 0,\r\n                lng: 0\r\n            },\r\n            _southWest: {\r\n                lat: 0,\r\n                lng: 0\r\n            }\r\n        }\r\n\r\n        if (mapRef.current && groupRef.current) { //we will get inside just once when loading\r\n            const map = mapRef.current.leafletElement;\r\n            const layer = groupRef.current.leafletElement;\r\n            if( (layer.getBounds()._northEast && !layer.getBounds()._northEast.equals(noCoords._northEast)) \r\n                    && (layer.getBounds()._southWest && !layer.getBounds()._southWest.equals(noCoords._southWest))\r\n                    && firstLoad) {\r\n                        map.fitBounds(layer.getBounds());\r\n                        setFirstLoad(false);\r\n            }\r\n        }\r\n    }, [mapRef, groupRef, firstLoad]);\r\n\r\n    //Render\r\n    return(\r\n        <Map ref={mapRef} center={[51.09, -115.34]} zoom={10} minZoom={2} maxBounds={bounds} maxBoundsViscosity={1.0}>\r\n            <TileLayer\r\n                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                maxZoom={18}\r\n                id='mapbox/outdoors-v11'\r\n                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n            />\r\n            <FeatureGroup ref={groupRef}>\r\n                {reports.map(report => (\r\n                    report.coord[0] !== \"\\u2014\" && report.coord[1] !== \"\\u2014\" && //funky conditional logic... not nice but wtv\r\n                    <Marker\r\n                        key={report.title}\r\n                        position={[\r\n                            report.coord[0],\r\n                            report.coord[1]\r\n                        ]}\r\n                        onClick={() => setactiveReport(report)}\r\n                    />\r\n                ))}\r\n            </FeatureGroup>\r\n\r\n            {activeReport && (\r\n                <Popup\r\n                    position={[\r\n                        activeReport.coord[0],\r\n                        activeReport.coord[1]\r\n                    ]}\r\n                    onClose={() => setactiveReport(null)}\r\n                >\r\n                    <div id=\"homepage-popup\">\r\n                        <Link to={`/${user}/photo-report/${activeReport.id}`}>\r\n                            <Heading heading className=\"has-text-weight-bold\">{activeReport.title}</Heading>\r\n                        </Link>\r\n                        <NamedFieldLevel id=\"homepage-popup\" name=\"Author\" content={activeReport.author} />\r\n                        <NamedFieldLevel id=\"homepage-popup\" name=\"Location\" content={activeReport.loc} />\r\n                        <NamedFieldLevel id=\"homepage-popup\" name=\"Route\" content={activeReport.route} />\r\n                        <NamedFieldLevel id=\"homepage-popup\" name=\"Pitches\" content={activeReport.pitches} />\r\n                        <NamedFieldLevel id=\"homepage-popup\" name=\"Summit Elevation (m)\" content={activeReport.elev} />\r\n                    </div>\r\n                </Popup>\r\n            )\r\n            }\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default UserMap;","import React from 'react';\r\nimport { Box, Columns } from 'react-bulma-components';\r\nimport AboutBox from '../components/AboutBox';\r\nimport UserMap from '../components/UserMap.js';\r\nimport '../App.css';\r\nimport './css/homePage.css';\r\n\r\nconst HomePage = ({ match }) => {\r\n    //Declarations\r\n    const user = match.params.user;\r\n\r\n    //Render\r\n    return (\r\n        <>\r\n        <Columns>\r\n            <Columns.Column size=\"one-third\">\r\n                <AboutBox user={user}/>\r\n            </Columns.Column>\r\n            <Columns.Column>\r\n                <Box>\r\n                    <UserMap user={user}/>\r\n                </Box>\r\n            </Columns.Column>\r\n        </Columns>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { Heading } from 'react-bulma-components';\r\n\r\nconst NamedField = (props) => {\r\n    //Render\r\n    return (\r\n        <div>\r\n        <Heading heading className=\"has-text-weight-bold\">{props.name}</Heading>\r\n        <Heading heading>{props.content}</Heading>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NamedField;","import React from 'react';\r\nimport { Heading } from 'react-bulma-components';\r\n\r\nconst NamedParagraph = ({ name, content, alignment='left' }) => {\r\n    //Render\r\n    return (\r\n        <div align={alignment}>\r\n            <Heading heading className=\"has-text-weight-bold\">{name}</Heading>\r\n            <p heading='true' className='is-size-7'>{content}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NamedParagraph","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Container,\r\n    Dropdown,\r\n    Heading,\r\n    Hero,\r\n    Image,\r\n    Level,\r\n    Message,\r\n    Modal,\r\n} from 'react-bulma-components';\r\nimport {\r\n    Map,\r\n    Marker,\r\n    TileLayer\r\n} from 'react-leaflet';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport ClimbingGrade from 'climbing-grade';\r\nimport NamedField from '../components/NamedField.js';\r\nimport NamedFieldLevel from '../components/NamedFieldLevel.js';\r\nimport NamedParagraph from '../components/NamedParagraph.js';\r\nimport \"./css/reportPage.css\"\r\nimport { undoFormatTripID } from '../components/helpers/formatParser.js';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\n\r\n\r\nconst ReportPage = (props) => {\r\n    //Declarations\r\n    //route parameters\r\n    const username = props.match.params.user;\r\n    const reportID = props.match.params.reportID;\r\n    //report info to be fetched\r\n    const [reportInfo, setReportInfo] = useState(null);\r\n    //repotInfo dependants\r\n    const multipleImages = reportInfo ?  reportInfo.images.length > 1 : false;\r\n    const gradeInfo = reportInfo ? new ClimbingGrade( reportInfo.grade, reportInfo.gradeSystem ) : null;\r\n    //view state\r\n    const [fullscreenState, setFullscreenState] = useState(false);\r\n    const [imageHeight, setImageHeight] = useState(\"74vh\");\r\n    const [ displayGradeSystem, setDisplayGradeSystem ] = useState('yds');\r\n    const [ showMap, setShowMap ] = useState(false);\r\n    const [ deletePressed, setDeletePressed ] = useState(false);\r\n\r\n    //Conditional Renders\r\n    const imageCarousel = reportInfo ? \r\n        (multipleImages ? \r\n            <Carousel\r\n                infiniteLoop\r\n                dynamicHeight={fullscreenState}\r\n                centerMode\r\n                centerSlidePercentage=\"65\"\r\n                showThumbs={false}\r\n                >\r\n                {reportInfo.images.map((image, key) => (\r\n                    <div key={image} style={{height: imageHeight}}>\r\n                        <img alt=\"\" src={image}/>\r\n                        <p className=\"legend\">{reportInfo.captions[key]}</p>\r\n                    </div>\r\n                ))}\r\n            </Carousel> :\r\n            <Columns>\r\n                <Columns.Column/>\r\n                <Columns.Column size=\"half\">\r\n                    <Carousel\r\n                        dynamicHeight={fullscreenState}\r\n                        onClickItem={()=>setFullscreenState(true)}\r\n                        onChange={()=>setFullscreenState(true)}\r\n                        showThumbs={false}>\r\n                        {reportInfo.images.map((image) => (\r\n                            <div key={image} style={{height: imageHeight}}>\r\n                                <img key={image} alt=\"\" src={image}/>\r\n                                <p key={image} className=\"legend\">Test Legend</p>\r\n                            </div>\r\n                        ))}\r\n                    </Carousel>\r\n                </Columns.Column>\r\n                <Columns.Column/>\r\n            </Columns> ) : null ;\r\n\r\n    const deleteMessage = deletePressed ?\r\n        <Message color='danger'>\r\n            <Message.Header>\r\n                Are you sure?\r\n                <Button color='danger' onClick={()=>{\r\n                    handleDeleteReport();\r\n                    props.history.push(`/tom-novak/trip-reports`);\r\n                }}>Delete</Button>\r\n                <Button remove onClick={()=>setDeletePressed(false)}/>\r\n            </Message.Header>\r\n        </Message> : null;\r\n\r\n    const content = reportInfo ? \r\n        <>\r\n        <div \r\n            onMouseEnter={() =>{\r\n                setFullscreenState(true);\r\n                setImageHeight(\"\")\r\n            }}\r\n            style={{backgroundColor: \"black\"}}>\r\n            {imageCarousel}\r\n        </div>\r\n        <Hero color=\"primary\" size=\"small\">\r\n            <Hero.Body>\r\n                <Container>\r\n                <Heading size={1} align='left'>\r\n                    {reportInfo.title}\r\n                </Heading>\r\n                <Heading subtitle>\r\n                    <Level>\r\n                        <Level.Side align='left'>\r\n                            <Level.Item>{undoFormatTripID(username)}</Level.Item>\r\n                        </Level.Side>\r\n                        <Level.Side align='right'>\r\n                            <Level.Item>{reportInfo.date.substring(0, reportInfo.date.search('T'))}</Level.Item>\r\n                        </Level.Side>\r\n                    </Level>\r\n                </Heading>\r\n                </Container>\r\n            </Hero.Body>\r\n        </Hero>\r\n        <div>\r\n            <Columns className=\"has-text-left\">\r\n                <Columns.Column size=\"one-fifth\">\r\n                    <Box>\r\n                        <Level>\r\n                            <Level.Item>\r\n                                <Heading subtitle size={4}>Upvotes: <strong>{reportInfo.upvotes}</strong></Heading>\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <Button onClick={()=>handleUpvoteReport()} color=\"white\"><Image size={32} src=\"http://localhost:3000/images/upvote-icon.png\"/></Button>\r\n                            </Level.Item>\r\n                        </Level>\r\n                    </Box>\r\n                    <Box>\r\n                        <Level>\r\n                            <Level.Item>\r\n                                <Button onClick={()=>props.history.push(`/tom-novak/edit-report/${reportID}`)} color='primary'>Edit Report</Button>\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <Button onClick={()=>{setDeletePressed(true)}} color=\"primary\">Delete</Button>\r\n                            </Level.Item>\r\n                        </Level>\r\n                        {deleteMessage}\r\n                    </Box>\r\n                </Columns.Column>\r\n                <Columns.Column size=\"half\" >\r\n                    <p className=\"is-size-5\" id=\"desc-paragraph\" style={{\"whiteSpace\": \"pre-line\"}}>{reportInfo.desc}</p>\r\n                </Columns.Column>\r\n                <Columns.Column>\r\n                    <Box>\r\n                        <NamedFieldLevel name=\"Route\" content={contentCheck(reportInfo.route)} />\r\n                        <NamedFieldLevel name=\"Location\" content={contentCheck(reportInfo.loc)} />\r\n                        <Level>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Heading heading className=\"has-text-weight-bold\">Coordinates</Heading>\r\n                                </Level.Item>\r\n                                <Level.Item>\r\n                                    <Heading heading>{contentCheck(reportInfo.coord[0])}, {contentCheck(reportInfo.coord[1])}</Heading>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                            <Level.Side align='right'>\r\n                                <Level.Item>\r\n                                    <Button color='primary' onClick={()=>setShowMap(true)}>Show on map</Button>\r\n                                    <Modal closeOnBlur={true} showClose={false} show={showMap} onClose={()=>setShowMap(false)}>\r\n                                        <Modal.Content>\r\n                                            <Container>\r\n                                                <Map id=\"modal-map\" center={[reportInfo.coord[0], reportInfo.coord[1]]} zoom={12}>\r\n                                                    <TileLayer\r\n                                                        url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                                                        attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                                                        maxZoom={18}\r\n                                                        id='mapbox/outdoors-v11'\r\n                                                        accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n                                                    />\r\n                                                    <Marker position={[reportInfo.coord[0], reportInfo.coord[1]]} />\r\n                                                </Map>\r\n                                            </Container>\r\n                                        </Modal.Content>\r\n                                    </Modal>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                        <Columns>\r\n                            <Columns.Column size=\"half\">\r\n                                <Level id=\"centered-level-item\">\r\n                                    <Level.Item>\r\n                                        <NamedField name=\"Discipline\" content={contentCheck(reportInfo.disc)} />\r\n                                    </Level.Item>\r\n                                    <Level.Item>\r\n                                        <NamedField name=\"Grade\" content={gradeInfo ? gradeInfo.format(displayGradeSystem) + \" \" +  reportInfo.sev : \"\\u2014\"} />\r\n                                    </Level.Item>\r\n                                </Level>\r\n                            </Columns.Column>\r\n                            <Columns.Column align='right' size=\"half\">\r\n                                <Dropdown \r\n                                    hoverable\r\n                                    right\r\n                                    value={displayGradeSystem}\r\n                                    onChange={(value)=>{setDisplayGradeSystem(value)}}>\r\n                                    <Dropdown.Item value='yds'>\r\n                                        YDS\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item value='french'>\r\n                                        French\r\n                                    </Dropdown.Item>    \r\n                                    <Dropdown.Item value='australian'>\r\n                                        Australian\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item value='british'>\r\n                                        British\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item value='south_african'>\r\n                                        South African\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item value='hueco'>\r\n                                        Hueco\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item value='font'>\r\n                                        Fontainebleau\r\n                                    </Dropdown.Item> \r\n                                </Dropdown>\r\n                            </Columns.Column>   \r\n                        </Columns>\r\n\r\n                        <Level id=\"centered-level-item\">\r\n                            <Level.Item>\r\n                                <NamedField name=\"Pitches\" content={contentCheck(reportInfo.pitches)} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Total Length (m)\" content={contentCheck(reportInfo.totalLength)} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Elevation (m)\" content={contentCheck(reportInfo.elev)} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Aspect\" content={contentCheck(reportInfo.aspect)} />\r\n                            </Level.Item>\r\n                        </Level>\r\n\r\n                        <Box>\r\n                            <NamedParagraph name=\"Gear\" content={reportInfo.gear} />\r\n                        </Box>\r\n\r\n                        <Box>\r\n                            <NamedParagraph name=\"Approach\" content={reportInfo.approach} />\r\n                        </Box>\r\n\r\n                        <Box>\r\n                            <NamedParagraph name=\"Descent\" content={reportInfo.descent} />\r\n                        </Box>\r\n\r\n                        <Box>\r\n                            <NamedParagraph name=\"Conditions\" content={reportInfo.conditions} />\r\n                        </Box>\r\n                    </Box>\r\n                </Columns.Column>\r\n            </Columns>   \r\n        </div>\r\n        </> : null; //add loader\r\n\r\n\r\n    //Event Handlers\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${username}/trip-reports/${reportID}`);\r\n            const body = await result.json();\r\n            setReportInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [username, reportID]);\r\n\r\n    const handleUpvoteReport = async () => {\r\n        const result = await fetch(`/api/${username}/trip-reports/${reportID}/upvote`, {\r\n            method: 'post',\r\n        });\r\n        const body = await result.json();\r\n\r\n        const updatedReport = body.reports.find(report => {\r\n            return report.id === reportID;\r\n        });\r\n        setReportInfo(updatedReport);\r\n    }\r\n\r\n    const handleDeleteReport = async () => {\r\n        await fetch(`/api/${username}/trip-reports/${reportID}/delete`, {\r\n            method: 'post',\r\n        });\r\n    }\r\n\r\n    //Render\r\n    return(\r\n        <>\r\n        {content}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ReportPage;","import ClimbingGrade from 'climbing-grade';\r\n\r\nfunction sortReports(reports, sortBy='date') {\r\n    let sortedReports = null;\r\n\r\n    switch(sortBy) {\r\n        case 'pitch':\r\n            sortedReports = reports.sort(sortByPitches);\r\n            break;\r\n        case 'grade':\r\n            sortedReports = reports.sort(sortByGrade);\r\n            break;\r\n        case 'elevation':\r\n            sortedReports = reports.sort(sortByElev);\r\n            break;\r\n        case 'length':\r\n            sortedReports = reports.sort(sortByLength);\r\n            break;\r\n        case 'time':\r\n            sortedReports = reports.sort(sortByTime);\r\n            break;\r\n        default:\r\n            sortedReports = reports.sort(sortByDate);\r\n            break;\r\n    }\r\n\r\n    return sortedReports;\r\n}\r\n\r\nconst sortByDate = (a, b) => {\r\n    let dateA = new Date(a.date);\r\n    let dateB = new Date(b.date);\r\n\r\n    if( dateA.getTime() === dateB.getTime() ) {\r\n        return 0;\r\n    } else if (dateA > dateB ) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nconst sortByPitches = (a, b) => {\r\n    let pitchesA = numberCheck(Number(a.pitches), 0);\r\n    let pitchesB = numberCheck(Number(b.pitches), 0);\r\n\r\n    if( pitchesA === pitchesB ) {\r\n        return 0;\r\n    } else if ( pitchesA > pitchesB) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nconst sortByGrade = (a, b) => {\r\n    let gradeA = new ClimbingGrade( a.grade, 'yds');\r\n    let gradeB = new ClimbingGrade( b.grade, 'yds');\r\n\r\n    let universalGradeA = gradeA._universalGrades[0];\r\n    let universalGradeB = gradeB._universalGrades[0];\r\n\r\n    if( universalGradeA === universalGradeB ) {\r\n        return 0;\r\n    } else if ( universalGradeA > universalGradeB ) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nconst sortByElev = (a, b) => {\r\n    let elevA = Number(a.elev);\r\n    let elevB = Number(b.elev);\r\n\r\n    if( elevA === elevB ) {\r\n        return 0;\r\n    } else if ( elevA > elevB ) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nconst sortByLength = (a, b) => {\r\n    let lengthA = numberCheck(Number(a.totalLength), 0);\r\n    let lengthB = numberCheck(Number(b.totalLength), 0);\r\n    \r\n    if( lengthA === lengthB ) {\r\n        return 0;\r\n    } else if ( lengthA > lengthB ) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nconst sortByTime = (a, b) => {\r\n    let timeA = numberCheck(Number(a.totalTime), Number.MAX_SAFE_INTEGER);\r\n    let timeB = numberCheck(Number(b.totalTime), Number.MAX_SAFE_INTEGER);\r\n\r\n    if( timeA === timeB ) {\r\n        return 0;\r\n    } else if ( timeA > timeB ) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nconst numberCheck = (input, replacement) => {\r\n    if(isNaN(input)) {\r\n        return replacement;\r\n    } else {\r\n        return input;\r\n    }\r\n}\r\n\r\nconst totalPitches = (reports) => {\r\n    let sum = 0;\r\n    reports.forEach((report) => {\r\n        if(!isNaN(Number(report.pitches))) {\r\n            sum += Number(report.pitches);\r\n        }\r\n    })\r\n    return sum;\r\n}\r\n\r\nconst totalTime = (reports) => {\r\n    let sum = 0;\r\n    reports.forEach((report) => {\r\n        if(!isNaN(Number(report.totalTime))) {\r\n            sum += Number(report.totalTime);\r\n        }\r\n    })\r\n    return sum;\r\n}\r\n\r\nconst totalLength = (reports) => {\r\n    let sum = 0;\r\n    reports.forEach((report) => {\r\n        if(!isNaN(Number(report.totalLength))) {\r\n            sum += Number(report.totalLength);\r\n        }\r\n    })\r\n    return sum;\r\n}\r\n\r\nconst totalElevation = (reports) => {\r\n    let sum = 0;\r\n    reports.forEach((report) => {\r\n        if(!isNaN(Number(report.elev))) {\r\n            sum += Number(report.elev);\r\n        }\r\n    })\r\n    return sum;\r\n}\r\n\r\nexport { sortReports, totalPitches, totalTime, totalLength, totalElevation };","import React, { useState, useLayoutEffect, useRef } from 'react';\r\n\r\nconst calculateBoundingBoxes = children => {\r\n    const boundingBoxes = {};\r\n\r\n    React.Children.forEach(children, child => {\r\n        const domNode = child.ref.current;\r\n\r\n        if (domNode){\r\n            const nodeBoundingBox = domNode.getBoundingClientRect();\r\n            boundingBoxes[child.key] = nodeBoundingBox;\r\n        }\r\n    });\r\n\r\n    return boundingBoxes;\r\n}\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useLayoutEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n  }\r\n\r\nconst AnimateChildren = ({ children }) => {\r\n\r\n    const [boundingBox, setBoundingBox] = useState({});\r\n    const [prevBoundingBox, setPrevBoundingBox] = useState({});\r\n    const prevChildren = usePrevious(children);\r\n    const [scroll, setScroll] = useState(0);\r\n    const prevScroll = usePrevious(scroll);\r\n\r\n    useLayoutEffect(() => {\r\n        const newBoundingBox = calculateBoundingBoxes(children);\r\n        setBoundingBox(newBoundingBox);\r\n        setScroll(window.scrollY);\r\n    }, [children]);\r\n\r\n    useLayoutEffect(() => {\r\n        const prevBoundingBox = calculateBoundingBoxes(prevChildren);\r\n        setPrevBoundingBox(prevBoundingBox);\r\n    }, [prevChildren]);\r\n\r\n    useLayoutEffect(() => {\r\n        const hasPrevBoundingBox = Object.keys(prevBoundingBox).length;\r\n\r\n        if (hasPrevBoundingBox) {\r\n            React.Children.forEach(children, child => {\r\n                const domNode = child.ref.current;\r\n                const firstBox = prevBoundingBox[child.key];\r\n                const lastBox = boundingBox[child.key];\r\n                const scrollDelta = prevScroll - scroll;\r\n                const changeInY = firstBox.top - lastBox.top + scrollDelta;\r\n\r\n                if (changeInY) {\r\n                    requestAnimationFrame(() => {\r\n                        domNode.style.transform = `translateY(${changeInY}px)`;\r\n                        domNode.style.transition = \"transform 0s\";\r\n\r\n                        requestAnimationFrame(() => {\r\n                            domNode.style.transform = \"\";\r\n                            domNode.style.transition = \"transform 500ms\";\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }, [boundingBox, prevBoundingBox, scroll, prevScroll, children]);\r\n\r\n    return children;\r\n}\r\n\r\nexport default AnimateChildren;","import React, { createRef } from 'react';\r\nimport { Box, Table } from 'react-bulma-components';\r\nimport {\r\n    sortReports,\r\n    totalElevation,\r\n    totalLength,\r\n    totalTime,\r\n    totalPitches } from './helpers/reportOperators.js';\r\nimport AnimateChildren from './AnimateChildren.js';\r\n\r\n\r\nconst AnalyticsTable = ({ userInfo, sortBy='date' }) => {\r\n    //Initialize report array\r\n    const reports = userInfo.pitchReports;\r\n\r\n    const sortedReports = sortReports(userInfo.pitchReports, sortBy);\r\n\r\n    const tableBody = sortedReports.map((report) => (\r\n        <tr key={report.title} ref={createRef()}>\r\n            <td>{report.title}</td>\r\n            <td>{report.route}</td>\r\n            <td>{report.grade + \" \" + report.sev}</td>\r\n            <td>{report.pitches}</td>\r\n            <td>{report.totalLength}</td>\r\n            <td>{report.totalTime}</td>\r\n            <td>{report.elev}</td>\r\n            <td>{report.date.substring(0, 10)}</td>\r\n        </tr>\r\n    ));\r\n\r\n    //Render\r\n    return (\r\n        <Box>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Route</th>\r\n                        <th>Grade</th>\r\n                        <th>Pitches</th>\r\n                        <th>Length (m)</th>\r\n                        <th>Time on Route (hrs)</th>\r\n                        <th>Elevation (m)</th>\r\n                        <th>Date</th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    <tr>\r\n                        <th>TOTALS</th>\r\n                        <th></th>\r\n                        <th></th>\r\n                        <th>{totalPitches(reports)}</th>\r\n                        <th>{totalLength(reports)}</th>\r\n                        <th>{totalTime(reports)}</th>\r\n                        <th>{totalElevation(reports)}</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </tfoot>\r\n                <tbody>\r\n                    <AnimateChildren>\r\n                        {tableBody}\r\n                    </AnimateChildren>\r\n                </tbody>\r\n            </Table>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AnalyticsTable;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatTripID } from './helpers/formatParser.js';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Heading,\r\n    Image,\r\n    Level,\r\n    List\r\n} from 'react-bulma-components';\r\nimport NamedField from '../components/NamedField.js';\r\nimport NamedFieldLevel from '../components/NamedFieldLevel.js';\r\nimport { getS3Image } from '../components/helpers/s3Interface.js';\r\nimport './css/logListEntry.css';\r\n\r\nconst LogListEntry = ({ user, report, setUserInfo }) => {\r\n    //Declarations\r\n    const maxDescriptionLength = 688;\r\n    const description = report.desc && report.desc.length >= maxDescriptionLength ?\r\n        report.desc.substring(0,maxDescriptionLength) + \" . . .\" : report.desc;\r\n\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n    const [coverImg, setCoverImg] = useState(null);\r\n    const [coverImgPlaceholder, setCoverImgPlaceholder] = useState(null);\r\n\r\n    if(firstLoad) {\r\n        getS3Image('mountain-placeholder.jpg').then(img => setCoverImgPlaceholder(img));\r\n        if(report.coverImg) {\r\n            getS3Image(report.coverImg).then(img => {setCoverImg(img)});\r\n        }\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    //Event Handlers\r\n    const handleUpvoteReport = async () => {\r\n        const result = await fetch(`/api/${user}/picture-trip-reports/${report.id}/upvote`, {\r\n            method: 'post',\r\n        });\r\n        const body = await result.json();\r\n        setUserInfo(body);\r\n    }\r\n\r\n    //Conditional Renders\r\n    const coverImgSrc = report.coverImg ? coverImg : coverImgPlaceholder;\r\n\r\n    //Render\r\n    return (\r\n        <>\r\n        <List.Item>\r\n            <Columns className=\"has-text-left\">\r\n                <Columns.Column>\r\n                    <Box>\r\n                        <img id='log-img' alt={coverImgSrc} src={coverImgSrc}/>\r\n                    </Box>\r\n                </Columns.Column>\r\n                <Columns.Column size=\"half\">\r\n                    <Level>\r\n                        <Level.Side align=\"left\">\r\n                            <Level.Item>\r\n                                <div>\r\n                                    <Link to={`/${user}/photo-report/${formatTripID(report.title)}`}>\r\n                                        <Heading className=\"has-text-weight-bold\">{report.title}</Heading>\r\n                                    </Link>\r\n                                    <Heading subtitle>{report.date.substring(0, report.date.search('T'))}</Heading>\r\n                                </div>\r\n                            </Level.Item>\r\n                        </Level.Side>\r\n                        <Level.Side align=\"right\">\r\n                            <Level.Item>\r\n                                <Box><Heading subtitle>Upvotes: <strong>{report.upvotes}</strong></Heading></Box>\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <Button onClick={() => handleUpvoteReport()} color=\"white\"><Image size={32} src=\"http://localhost:3000/images/upvote-icon.png\"/></Button>\r\n                            </Level.Item>\r\n                        </Level.Side>\r\n                    </Level>\r\n                    <p style={{\"whiteSpace\": \"pre-line\"}}>{description}</p>\r\n                </Columns.Column>\r\n                <Columns.Column>\r\n                    <Box>\r\n                        <NamedFieldLevel name=\"Route\" content={report.route} />\r\n                        <NamedFieldLevel name=\"Location\" content={report.loc} />\r\n                        <Level>\r\n                            <Level.Side align=\"left\">\r\n                                <Level.Item>\r\n                                    <Heading heading className=\"has-text-weight-bold\">Coordinates</Heading>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                            <Level.Side align=\"right\">\r\n                                <Level.Item>\r\n                                    <Heading heading>{report.coord[0]}, {report.coord[1]}</Heading>\r\n                                </Level.Item>\r\n                            </Level.Side>\r\n                        </Level>\r\n\r\n                        <Level id=\"centered-level-item\">\r\n                            <Level.Item>\r\n                                <NamedField name=\"Discipline\" content={report.disc} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Grade\" content={report.grade ? report.grade + \" \" + report.sev : \"\\u2014\"} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Pitches\" content={report.pitches} />\r\n                            </Level.Item>\r\n                        </Level>\r\n\r\n                        <Level id=\"centered-level-item\">\r\n                            <Level.Item>\r\n                                <NamedField name=\"Total Length (m)\" content={report.totalLength} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Time (hrs)\" content={report.totalTime} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Elevation (m)\" content={report.elev} />\r\n                            </Level.Item>\r\n                        </Level>\r\n                    </Box>\r\n                </Columns.Column>\r\n            </Columns>\r\n        </List.Item>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LogListEntry;","import React, { createRef } from 'react';\r\nimport '../App.css'\r\nimport {\r\n    Container,\r\n    Heading,\r\n    Hero,\r\n    List,\r\n} from 'react-bulma-components';\r\nimport { sortReports } from './helpers/reportOperators';\r\nimport LogListEntry from './LogListEntry';\r\nimport AnimateChildren from './AnimateChildren';\r\n\r\nconst ReportsList = ({userInfo, setUserInfo, sortBy='date'}) => {\r\n    //Initialize report array\r\n    const reports = userInfo.pitchReports;\r\n\r\n    const sortedReports = sortReports(userInfo.pitchReports, sortBy);\r\n    //Render\r\n    return(\r\n        reports.length === 0 ? \r\n            <Hero color=\"primary\" size=\"small\">\r\n                <Hero.Body>\r\n                    <Container>\r\n                    <Heading size={3} align=\"center\">\r\n                        No reports added! Click 'Add Report' to get started.\r\n                    </Heading>\r\n                    </Container>\r\n                </Hero.Body>\r\n            </Hero> :\r\n            <List>\r\n                <AnimateChildren>\r\n                {sortedReports.map((report) => (\r\n                    <div key={report.title} ref={createRef()}>\r\n                        <LogListEntry key={report.title}\r\n                            user={userInfo.user}\r\n                            report={report}\r\n                            setUserInfo={setUserInfo}\r\n                        />\r\n                    </div>\r\n                    ))}\r\n                </AnimateChildren>\r\n \r\n\r\n\r\n            </List>\r\n    );\r\n}\r\n\r\nexport default ReportsList;","import React, { useState, useEffect } from 'react';\r\nimport '../App.css'\r\nimport {\r\n    Box,\r\n    Columns,\r\n    Level\r\n} from 'react-bulma-components';\r\nimport AnalyticsTable from '../components/AnalyticsTable.js'\r\nimport ReportsList from '../components/ReportsList.js'\r\nimport { Form, Button } from 'react-bulma-components';\r\nimport UserMap from '../components/UserMap';\r\nimport Scroll from 'react-scroll';\r\nconst { Field, Control } = Form;\r\n\r\nconst scrollToContent = () => {\r\n    let scroll = Scroll.animateScroll;\r\n    scroll.scrollTo(57);\r\n}\r\n\r\nconst ReportsFeedPage = ({ match, history }) => {\r\n    //Declarations\r\n    const user = match.params.user;\r\n    const [pageState, setPageState] = useState(match.params.view);\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    \r\n    //passed down to child components to determine how entries will be sorted.\r\n    //valid entries are 'date' 'pitch' 'length' 'elevation' 'time'\r\n    const [sortBy, setSortBy] = useState('date');\r\n\r\n\r\n    //Helper Functions\r\n    const colorConversion = (state) => {\r\n        return state ? \"success\" : \"\";\r\n    }\r\n\r\n    //scroll down to content on loading\r\n    if(!userInfo) {\r\n        scrollToContent();\r\n    }\r\n\r\n    //Conditional Renders\r\n\r\n    const renderContent = (userInfo, pageState, sortBy) => {\r\n        if (userInfo) {\r\n            switch(pageState) {\r\n                    case 'maps':\r\n                        return (\r\n                            <Columns>\r\n                                <Columns.Column/>\r\n                                <Columns.Column size='two-thirds'>\r\n                                    <Box>\r\n                                        <UserMap user={userInfo.user} />;\r\n                                    </Box>\r\n                                </Columns.Column>\r\n                                <Columns.Column/>\r\n                            </Columns>\r\n                        );\r\n                    case 'table':\r\n                        return <AnalyticsTable userInfo={userInfo} sortBy={sortBy}/>;\r\n                    case 'list':\r\n                        return <ReportsList userInfo={userInfo} setUserInfo={setUserInfo} sortBy={sortBy} />;\r\n                    default:\r\n                        return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n \r\n\r\n    //Event Handlers\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${user}/picture-trip-reports`);\r\n            const body = await result.json();\r\n            setUserInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [user]);\r\n\r\n\r\n    //Render\r\n    return (\r\n        <>\r\n        {/* <Hero color=\"primary\" size=\"small\">\r\n            <Hero.Body>\r\n                <Container>\r\n                <Heading size={3} align=\"left\">\r\n                    Trip Reports\r\n                </Heading>\r\n                <Heading subtitle align=\"left\">\r\n                    {userInfo ? undoFormatUserID(userInfo.user) : null}\r\n                </Heading>\r\n                </Container>\r\n            </Hero.Body>\r\n        </Hero> */}\r\n        <div style={{margin: \"1rem\"}}>\r\n            <Level renderAs=\"nav\">\r\n                <Level.Side align=\"left\">\r\n                    <Level.Item>\r\n                        <Field kind=\"addons\">\r\n                            <Control>\r\n                                <Button color={colorConversion(pageState === 'list')} onClick={() =>{setPageState('list')}}>List View</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(pageState === 'maps')} onClick={() => {setPageState('maps');}}>Map View</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(pageState === 'table')} onClick={() => {setPageState('table')}}>Table View</Button>\r\n                            </Control>\r\n                        </Field>\r\n                    </Level.Item>\r\n                </Level.Side>\r\n                <Level.Side align=\"right\">\r\n                    <Level.Item>\r\n                        <Field kind=\"addons\">\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'date')} onClick={() => setSortBy('date')}>Date</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'grade')} onClick={() => setSortBy('grade')}>Grade</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'pitch')} onClick={() => setSortBy('pitch')}>Pitch</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'length')} onClick={() => setSortBy('length')}>Length</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'time')} onClick={() => setSortBy('time')}>Time</Button>\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color={colorConversion(sortBy === 'elevation')} onClick={() => setSortBy('elevation')}>Elevation</Button>\r\n                            </Control>\r\n                        </Field>\r\n                    </Level.Item>\r\n                </Level.Side>\r\n            </Level>\r\n        </div>\r\n        {renderContent(userInfo, pageState, sortBy)}\r\n        </>\r\n        );\r\n}\r\n\r\nexport default ReportsFeedPage;","import { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass ScrollToTop extends Component {\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.location !== prevProps.location) {\r\n        window.scrollTo(0, 0)\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return this.props.children\r\n    }\r\n  }\r\n  \r\n  export default withRouter(ScrollToTop)","export default __webpack_public_path__ + \"static/media/mountain-logo.a3a8cb8f.jpg\";","import React, { useState } from 'react';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css'\r\nimport { Navbar, Button } from 'react-bulma-components';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport logo from '../images/mountain-logo.jpg'\r\n\r\n\r\nconst TripNavBar = (props) => {\r\n    //Declarations\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    //Render\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Brand>\r\n                <Navbar.Item renderAs=\"a\" href=\"#\">\r\n                    <img src={logo} alt=\"logo\" width=\"112\" />\r\n                </Navbar.Item>\r\n            <Navbar.Burger onClick={() => setIsActive(!isActive)}>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n            </Navbar.Burger>\r\n            </Navbar.Brand>\r\n            <Navbar.Menu>\r\n                <Navbar.Container>\r\n                    <Link to=\"/tom-novak/home\" className=\"navbar-item\">Home</Link>\r\n                    <Navbar.Item dropdown hoverable>\r\n                        <Navbar.Link arrowless={true}>\r\n                            <Link to=\"/tom-novak/trip-report-feed/list\" className=\"navbar-item\">Trip Reports</Link>\r\n                        </Navbar.Link>\r\n                        {/* <Navbar.Dropdown>\r\n                            <Link to=\"/tom-novak/trip-report-feed/list\" className=\"navbar-item\">List View</Link>\r\n                            <Link to=\"/tom-novak/trip-report-feed/maps\" className=\"navbar-item\">Map View</Link>                       \r\n                            <Link to=\"/tom-novak/trip-report-feed/table\" className=\"navbar-item\">Table View</Link>\r\n                        </Navbar.Dropdown> */}\r\n                    </Navbar.Item>\r\n                    {/* <Link to=\"/tom-novak/about\" className=\"navbar-item\">About</Link> */}\r\n                </Navbar.Container>\r\n                <Navbar.Container position='end'>\r\n                    <Navbar.Item>\r\n                       <Button onClick={()=>props.history.push(\"/tom-novak/add-pitch-report\")} color='primary'>Add Report</Button>\r\n                    </Navbar.Item>\r\n                </Navbar.Container>\r\n            </Navbar.Menu>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default withRouter(TripNavBar);","import React from 'react';\r\nimport { Content, Footer } from 'react-bulma-components';\r\n\r\nconst TripFooter = () => {\r\n\r\n    //Render\r\n    return (\r\n        <Footer>\r\n            <Content className=\"has-text-centered\">\r\n                <p><strong>Trips</strong> by Tom Novak</p>\r\n            </Content>\r\n        </Footer>\r\n    );\r\n}\r\n\r\nexport default TripFooter;","import React, { useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Columns,\r\n    Container,\r\n    Dropdown,\r\n    Heading,\r\n    Level,\r\n    Message,\r\n    Modal,\r\n} from 'react-bulma-components';\r\nimport {\r\n    Map,\r\n    Marker,\r\n    TileLayer\r\n} from 'react-leaflet';\r\nimport { contentCheck } from '../components/contentCheck.js'\r\nimport ClimbingGrade from 'climbing-grade';\r\n\r\nimport NamedField from '../components/NamedField.js';\r\nimport NamedFieldLevel from '../components/NamedFieldLevel.js';\r\nimport NamedParagraph from '../components/NamedParagraph.js';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport './css/flyoutDetailsColumn.css';\r\n\r\nconst FlyoutDetailsColumn = ( props ) => {\r\n    //Declarations\r\n    const [ showMap, setShowMap ] = useState(false);\r\n    const [ displayGradeSystem, setDisplayGradeSystem ] = useState('yds');\r\n    const [ deletePressed, setDeletePressed] = useState(false);\r\n\r\n    const gradeInfo = props.reportInfo ? new ClimbingGrade( props.reportInfo.grade, props.reportInfo.gradeSystem ) : null;\r\n\r\n    const visibility = props.show ? 'show' : 'hide';\r\n\r\n    //Event Handlers\r\n    const handleDeleteReport = async () => {\r\n        await fetch(`/api/${props.user}/picture-trip-reports/${props.reportInfo.id}/delete`, {\r\n            method: 'post',\r\n        });\r\n    }\r\n\r\n    //Conditional Renders\r\n    const deleteMessage = deletePressed ?\r\n        <Message color='danger'>\r\n            <Message.Header>\r\n                Are you sure?\r\n                <Button color='danger' onClick={()=>{\r\n                    handleDeleteReport();\r\n                    props.history.push(`/tom-novak/trip-reports`);\r\n                }}>Delete</Button>\r\n                <Button remove onClick={()=>setDeletePressed(false)}/>\r\n            </Message.Header>\r\n        </Message> : null;\r\n\r\n\r\n    return (\r\n        <Columns.Column id='flyout-detail-column' className={visibility}>\r\n            <Box id='flyout-title-box'>\r\n                <Heading align='left' className='is-size-4' style={{'margin': '0px 0px 5px 0px'}}>{props.reportInfo.title}</Heading>\r\n                <Heading align='left' className='is-size-6' style={{'margin': '0px 0px 0px 0px'}}>{props.reportInfo.author}</Heading>\r\n            </Box>\r\n            <Box id='flyout-detail-box' style={{height: `calc( ${props.height} + 11vh )`}} >\r\n                <NamedFieldLevel name=\"Route\" content={contentCheck(props.reportInfo.route)} />\r\n                <NamedFieldLevel name=\"Location\" content={contentCheck(props.reportInfo.loc)} />\r\n                <Level>\r\n                    <Level.Side align='right'>\r\n                        <Level.Item>\r\n                            <Heading heading className=\"has-text-weight-bold\">Coordinates</Heading>\r\n                        </Level.Item>\r\n                        <Level.Item>\r\n                            <Heading heading>{contentCheck(props.reportInfo.coord[0])}, {contentCheck(props.reportInfo.coord[1])}</Heading>\r\n                        </Level.Item>\r\n                    </Level.Side>\r\n                    <Level.Side align='right'>\r\n                        <Level.Item>\r\n                            <Button color='primary' onClick={()=>setShowMap(true)}>Show on map</Button>\r\n                            <Modal closeOnBlur={true} showClose={false} show={showMap} onClose={()=>setShowMap(false)}>\r\n                                <Modal.Content>\r\n                                    <Container>\r\n                                        <Map id=\"modal-map\" center={[props.reportInfo.coord[0], props.reportInfo.coord[1]]} zoom={12}>\r\n                                            <TileLayer\r\n                                                url=\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\"\r\n                                                attribution='Map data © <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery (c) <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                                                maxZoom={18}\r\n                                                id='mapbox/outdoors-v11'\r\n                                                accessToken= 'pk.eyJ1IjoidG9tbm92YWsxMyIsImEiOiJja2VseGtxeGwyYmU0MnJtejdiZmIydHd2In0.Wx7ng-I076vOfOb2qNnTkA'\r\n                                            />\r\n                                            <Marker position={[props.reportInfo.coord[0], props.reportInfo.coord[1]]} />\r\n                                        </Map>\r\n                                    </Container>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n                        </Level.Item>\r\n                    </Level.Side>\r\n                </Level>\r\n\r\n                <Columns>\r\n                    <Columns.Column size=\"half\">\r\n                        <Level id=\"centered-level-item\">\r\n                            <Level.Item>\r\n                                <NamedField name=\"Discipline\" content={contentCheck(props.reportInfo.disc)} />\r\n                            </Level.Item>\r\n                            <Level.Item>\r\n                                <NamedField name=\"Grade\" content={gradeInfo ? gradeInfo.format(displayGradeSystem) + \" \" +  props.reportInfo.sev : \"\\u2014\"} />\r\n                            </Level.Item>\r\n                        </Level>\r\n                    </Columns.Column>\r\n                    <Columns.Column align='right' size=\"half\">\r\n                        <Dropdown \r\n                            hoverable\r\n                            right\r\n                            value={displayGradeSystem}\r\n                            onChange={(value)=>{setDisplayGradeSystem(value)}}>\r\n                            <Dropdown.Item value='yds'>\r\n                                YDS\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item value='french'>\r\n                                French\r\n                            </Dropdown.Item>    \r\n                            <Dropdown.Item value='australian'>\r\n                                Australian\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item value='british'>\r\n                                British\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item value='south_african'>\r\n                                South African\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item value='hueco'>\r\n                                Hueco\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item value='font'>\r\n                                Fontainebleau\r\n                            </Dropdown.Item> \r\n                        </Dropdown>\r\n                    </Columns.Column>   \r\n                </Columns>\r\n\r\n                <Level id=\"centered-level-item\">\r\n                    <Level.Item>\r\n                        <NamedField name=\"Pitches\" content={contentCheck(props.reportInfo.pitches)} />\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <NamedField name=\"Total Length (m)\" content={contentCheck(props.reportInfo.totalLength)} />\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <NamedField name=\"Elevation (m)\" content={contentCheck(props.reportInfo.elev)} />\r\n                    </Level.Item>\r\n                    <Level.Item>\r\n                        <NamedField name=\"Aspect\" content={contentCheck(props.reportInfo.aspect)} />\r\n                    </Level.Item>\r\n                </Level>\r\n\r\n                <Box>\r\n                    <NamedParagraph name=\"Gear\" content={props.reportInfo.gear} />\r\n                </Box>\r\n\r\n                <Box>\r\n                    <NamedParagraph name=\"Approach\" content={props.reportInfo.approach} />\r\n                </Box>\r\n\r\n                <Box>\r\n                    <NamedParagraph name=\"Descent\" content={props.reportInfo.descent} />\r\n                </Box>\r\n\r\n                <Box style={{'margin-bottom': '15px'}}>\r\n                    <NamedParagraph name=\"Conditions\" content={props.reportInfo.conditions} />\r\n                </Box>\r\n                \r\n                <Box>\r\n                    {deleteMessage}\r\n                    <Level>\r\n                        <Level.Item>\r\n                            <Button onClick={()=>props.history.push(`/tom-novak/edit-photo-report/${props.reportInfo.id}`)} color='primary'>Edit Report</Button>\r\n                        </Level.Item>\r\n                        <Level.Item>\r\n                            <Button onClick={()=>setDeletePressed(true)} color='danger'>Delete</Button>\r\n                        </Level.Item>\r\n                    </Level>\r\n                </Box>\r\n            </Box>\r\n        </Columns.Column>\r\n    );\r\n}\r\n\r\nexport default withRouter(FlyoutDetailsColumn);","import React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport './css/routeProgressBar.css';\r\n\r\nconst Filler = ({ filled }) => {\r\n    const percentage = filled ? 100 : 0;\r\n\r\n    return <div \r\n            className=\"filler\"\r\n            style={{ height: `${percentage}%`}} />\r\n}\r\n\r\nconst HoverInfo = ({ segment }) => {\r\n    return(\r\n        <>\r\n            <p className=\"is-size-7\">{`Pitch ${segment.pitch}`}</p>\r\n            <p className=\"is-size-7\">{segment.grade}</p>\r\n            <p className=\"is-size-7\">{`${segment.length} m`}</p>\r\n        </>\r\n    );\r\n}\r\n\r\nconst processFilledIndex = (segmentArray, filledIndex) => {\r\n    if ( !isNaN(filledIndex) ) {\r\n        return(filledIndex);\r\n    } else if (filledIndex === 'Descent') {\r\n        return(segmentArray.length);\r\n    } else {\r\n        return(0);\r\n    }\r\n}\r\n\r\nconst Segment = ({ className, segment, height, filled, toolTip }) => {\r\n    if(segment && segment.pitch && segment.grade && segment.length ) {\r\n        return(\r\n            <div>\r\n                <Tooltip\r\n                    title={<HoverInfo segment={segment}/>}\r\n                    placement='right'\r\n                    arrow\r\n                    open={toolTip}>\r\n                    <div \r\n                        style={{height: `${height}px`}} \r\n                        className={className}>\r\n                        <Filler filled={filled}/>\r\n                    </div>\r\n                </Tooltip>\r\n            </div>\r\n        );\r\n    } else {\r\n        return(\r\n            <div \r\n                style={{height: `${height}px`}} \r\n                className={className}>\r\n                <Filler filled={filled}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst RouteProgressBar = ({ segmentArray, filledIndex }) => {\r\n    const segmentHeight = Math.round((window.innerHeight - 122)/segmentArray.length);\r\n    const workingArray = [...segmentArray].reverse();\r\n    const workingFilledIndex = segmentArray.length - processFilledIndex(segmentArray, filledIndex);\r\n    const descentColor = (workingFilledIndex === 0) ? '#1DA598' : 'white';\r\n    return (\r\n        <>\r\n        {/* in progress  */}\r\n        <p\r\n        heading='true'\r\n        id='descent-segment'\r\n        className='is-size-4 has-text-weight-bold'\r\n        style={{'margin-top': '15px', 'margin-left': '10px', color: descentColor}}>Descent</p>\r\n        {\r\n            workingArray.map((segment, index) => {\r\n\r\n                if (index === 0) {\r\n                    return(\r\n                        <Segment\r\n                            className=\"route-progress-end\"\r\n                            height={segmentHeight}\r\n                            segment={segment}\r\n                            filled={index >= (workingFilledIndex - 1)}\r\n                            toolTip={index === (workingFilledIndex - 1)}\r\n                            key={`prog-bar-segment-${index}`} />\r\n                    );\r\n                } else if (index === (segmentArray.length - 2)) {\r\n                    return(\r\n                        <Segment\r\n                            className=\"route-progress-start\"\r\n                            height={segmentHeight}\r\n                            segment={segment}\r\n                            filled={index >= (workingFilledIndex - 1)}\r\n                            toolTip={index === (workingFilledIndex - 1)}\r\n                            key={`prog-bar-segment-${index}`} />\r\n                    );\r\n                } else if (index === (segmentArray.length - 1)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    return(\r\n                        <Segment\r\n                            className=\"route-progress-middle\"\r\n                            height={segmentHeight}\r\n                            segment={segment} \r\n                            filled={index >= (workingFilledIndex - 1)}\r\n                            toolTip={index === (workingFilledIndex - 1)}\r\n                            key={`prog-bar-segment-${index}`} />\r\n                    );\r\n                }\r\n            })\r\n        }\r\n\r\n        <p\r\n        heading='true'\r\n        id='approach-segment'\r\n        color='primary'\r\n        className='is-size-4 has-text-weight-bold'>Approach</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RouteProgressBar;","import React, { useState, useEffect, createRef } from 'react';\r\nimport {\r\n    Columns,\r\n    Message,\r\n} from 'react-bulma-components';\r\nimport Scroll from 'react-scroll';\r\nimport FlyoutDetailsColumn from '../components/FlyoutDetailsColumn.js'\r\nimport RouteProgressBar from '../components/RouteProgressBar.js';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport '../../node_modules/react-responsive-carousel/lib/styles/carousel.css';\r\nimport './css/pictureReportPage.css';\r\nimport { getS3Image } from '../components/helpers/s3Interface.js';\r\n\r\nconst scrollToContent = () => {\r\n    let scroll = Scroll.animateScroll;\r\n    scroll.scrollTo(57);\r\n}\r\n\r\nconst formatPitchNum = (number) => {\r\n    if( !isNaN(number) ){\r\n        return `Pitch ${number}`;\r\n    } else {\r\n        return number;\r\n    }\r\n}\r\n\r\nconst PictureReportPage = ( {match} ) => {\r\n    //Declarations\r\n    const username = match.params.user;\r\n    const reportID = match.params.reportID;\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n    const [reportInfo, setReportInfo] = useState(null);\r\n    const [fullScreen, setFullScreen] = useState(false);\r\n    const [imageHeight, setImageHeight] = useState(\"72vh\");\r\n    const [imageColumnWidth, setImageColumnWidth] = useState('is-7');\r\n    const [detailColumnWidth, setDetailColumnWidth] = useState('is-4');\r\n\r\n    const [imgRefs, setImgRefs] = useState([]);\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    const [segmentArray, setSegmentArray] = useState([]);\r\n\r\n    const [firstLoad, setFirstLoad] = useState(true);\r\n\r\n    //prepare image array\r\n    if(reportInfo && reportInfo.pitchArray.length > 0 && images.length === 0) {\r\n        let workingImgArray = [];\r\n        let workingSegmentArray = isNaN(reportInfo.pitches) ? [] : new Array( parseInt(reportInfo.pitches, 10) ).fill(null);\r\n\r\n        if ( reportInfo.coverImg ) {\r\n            workingImgArray = workingImgArray.concat({\r\n                image: reportInfo.coverImg,\r\n                caption: reportInfo.desc,\r\n                grade: null,\r\n                length: null,\r\n                number: 'Summary'\r\n            });\r\n        }\r\n\r\n        reportInfo.pitchArray.map((pitch) => {\r\n            if (pitch) {\r\n                if( !isNaN(pitch.number) ) {\r\n                    workingSegmentArray[pitch.number] = {\r\n                        pitch: pitch.number,\r\n                        grade: pitch.grade._inputGrade,\r\n                        length: pitch.length\r\n                    }\r\n                }\r\n                pitch.images.map((image, index) => {\r\n\r\n                    workingImgArray = workingImgArray.concat({\r\n                        image: image,\r\n                        caption: pitch.captions[index],\r\n                        grade: pitch.grade,\r\n                        length: pitch.length,\r\n                        number: pitch.number\r\n                    });\r\n                    return 0;\r\n                });\r\n            }\r\n            return 0;\r\n        });\r\n        setImages(workingImgArray);\r\n        if( isNaN(reportInfo.pitches) ) {\r\n            setSegmentArray([]);\r\n        } else {\r\n            setSegmentArray(workingSegmentArray);\r\n        }\r\n    }\r\n\r\n    //set image refs once on loading\r\n    if(images.length > 0 && imgRefs.length === 0) {\r\n        let refArray = new Array(images.length);\r\n        let i = 0;\r\n\r\n        for(i = 0; i < images.length; i++) {\r\n            refArray[i] = createRef();\r\n        }\r\n        setImgRefs(refArray);\r\n    }\r\n\r\n    if( reportInfo && firstLoad && images.length > 0 ) {\r\n\r\n        const workingImages = [...images];\r\n\r\n        images.map((image, index) => { \r\n            getS3Image(image.image).then(img => {\r\n                workingImages[index].image = img;\r\n                if(index === images.length - 1) {\r\n                    setImages(workingImages);\r\n                }\r\n            });\r\n            return 0;\r\n        })\r\n\r\n        setFirstLoad(false);\r\n    }\r\n\r\n    //scroll down to content on loading\r\n    if(!reportInfo) {\r\n        scrollToContent();\r\n    }\r\n\r\n    //Event Handlers\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/${username}/picture-trip-reports/${reportID}`);\r\n            const body = await result.json();\r\n            setReportInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [username, reportID]);\r\n\r\n    const updateCurrentSlide = (index) => {\r\n        if (currentSlide !== index) {\r\n            setCurrentSlide(index);\r\n        }\r\n    }\r\n\r\n    const resize = () => {\r\n\r\n        let workingFullscreenState = !fullScreen;\r\n        setFullScreen(!fullScreen);\r\n\r\n        if( imgRefs[currentSlide].current && workingFullscreenState){\r\n            //smol algebra break\r\n            let heightWidthRatio = imgRefs[currentSlide].current.naturalHeight/imgRefs[currentSlide].current.naturalWidth;\r\n            let scaledHeight = (window.innerWidth * (10/12) ) * heightWidthRatio;\r\n            \r\n            setImageHeight(`${scaledHeight}px`);\r\n            setImageColumnWidth('is-10');\r\n            setDetailColumnWidth(null);\r\n        } else {\r\n            setImageHeight('72vh');\r\n            setImageColumnWidth('is-7');\r\n            setDetailColumnWidth('is-4');\r\n\r\n            scrollToContent();\r\n        }\r\n    };\r\n\r\n    const routeDetail = reportInfo ? \r\n    <FlyoutDetailsColumn \r\n        user={username}\r\n        reportInfo={reportInfo} \r\n        show={!fullScreen} \r\n        columnWidth={detailColumnWidth}\r\n        height={imageHeight} /> : null;\r\n\r\n        \r\n    //Conditional Renders \r\n    const imageCarousel = images.length > 0 ? images.map((image, key) => {\r\n        return(\r\n        <div\r\n            key={image}\r\n            style={{\r\n                height: imageHeight,\r\n                transition: 'height .3s ease-out'\r\n            }}\r\n            >\r\n            {/* gross code below - could be done much better if this were to be done again */}\r\n            { !firstLoad && (<img\r\n                alt={image.image}\r\n                src={image.image}\r\n                ref={imgRefs[key]}/> )}\r\n        </div>\r\n        );\r\n    }) : null;\r\n\r\n    const progressBar = segmentArray.length > 0 && images[currentSlide] ? <RouteProgressBar segmentArray={segmentArray} filledIndex={images[currentSlide].number}/> : null;\r\n    return(\r\n        <Columns className='has-background-dark' id='picture-report-content'>\r\n            <Columns.Column className='is-1'>\r\n                {progressBar}\r\n            </Columns.Column>\r\n            <Columns.Column id='picture-report-column' className={imageColumnWidth}>\r\n                <Carousel\r\n                    showThumbs={false}\r\n                    onChange={updateCurrentSlide}\r\n                    onClickItem={()=>resize()}\r\n                    selectedItem={currentSlide}>\r\n                    {imageCarousel}\r\n                </Carousel>\r\n                    <div ref={createRef()}>\r\n                        <Carousel\r\n                            showThumbs={false}\r\n                            showStatus={false}\r\n                            showIndicators={false}\r\n                            onChange={updateCurrentSlide}\r\n                            selectedItem={currentSlide}>\r\n                            {\r\n                                images.length > 0 ? images.map((image, key) => (\r\n                                    <div key={key}>\r\n                                        <Message>\r\n                                            <Message.Header>\r\n                                                {formatPitchNum(image.number)}\r\n                                            </Message.Header>\r\n                                            <Message.Body  style={{height: '18vh', 'overflowY': 'scroll', 'scrollbarWidth': 'none'}}>\r\n                                                <p align='left' heading='true' className='is-size-6'>{image.caption}</p>\r\n                                            </Message.Body>\r\n                                        </Message>\r\n                                    </div>\r\n                                )) : null\r\n                            }\r\n                        </Carousel>\r\n                    </div>\r\n            </Columns.Column>\r\n            \r\n            {routeDetail}\r\n\r\n        </Columns>\r\n    );\r\n}\r\n\r\nexport default PictureReportPage;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport AboutPage from './pages/AboutPage';\nimport AddReportPage from './pages/AddReportPage';\nimport AddPitchReportPage from './pages/AddPitchReportPage';\nimport EditReportPage  from './pages/EditReportPage';\nimport EditPitchReportPage from './pages/EditPitchReportPage';\nimport HomePage from './pages/HomePage';\nimport ReportPage from './pages/ReportPage';\nimport ReportsFeedPage from './pages/ReportsFeedPage';\nimport ScrollToTop from './components/ScrollToTop';\nimport TripNavBar from './components/TripNavBar';\nimport TripFooter from './components/TripFooter';\nimport './App.css';\nimport PictureReportPage from './pages/PictureReportPage';\n\nfunction App() {\n\n  return (\n    <Router>\n      <ScrollToTop>\n        <div className=\"App\">\n          <TripNavBar />\n          <div id=\"page-body\">\n            <Route exact path=\"/\">\n              {/* temporary redirect to tom-novak home page. Will be reworked when multiple users added */}\n              <Redirect to=\"/tom-novak/home\" />\n            </Route>\n            <Route path=\"/:user/home\" component={HomePage} exact />\n            <Route path=\"/:user/about\" component={AboutPage} />\n            <Route path=\"/:user/trip-report-feed/:view\" exact component={ReportsFeedPage} />\n            <Route path=\"/:user/trip-reports/:reportID\" component={ReportPage} />\n            <Route path=\"/:user/add-report\" component={AddReportPage} />\n            <Route path=\"/:user/add-pitch-report\" component={AddPitchReportPage} />\n            <Route path=\"/:user/photo-report/:reportID\" component={PictureReportPage} />\n            <Route path=\"/:user/edit-report/:reportID\" component={EditReportPage} />\n            <Route path=\"/:user/edit-photo-report/:reportID\" component = {EditPitchReportPage} />\n          </div>\n          <TripFooter/>\n        </div>\n      </ScrollToTop>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}